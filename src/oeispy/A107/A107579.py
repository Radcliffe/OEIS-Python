# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A107579

from itertools import count, islice
from sympy import isprime
from sympy.utilities.iterables import multiset_permutations
def agen(b=10, sod=10): # generator for any base, sum-of-digits
    if 0 <= sod < b:
        yield sod
    nzdigs = [i for i in range(1, b) if i <= sod]
    nzmultiset = []
    for d in range(1, b):
        nzmultiset += [d]*(sod//d)
    for d in count(2):
        fullmultiset = [0]*(d-1-(sod-1)//(b-1)) + nzmultiset
        for firstdig in nzdigs:
            target_sum, restmultiset = sod - int(firstdig), fullmultiset[:]
            restmultiset.remove(firstdig)
            for p in multiset_permutations(restmultiset, d-1):
                if sum(p) == target_sum:
                    t = int("".join(map(str, [firstdig]+p)), b)
                    if isprime(t):
                        yield t
                    if p[0] == target_sum:
                        break
print(list(islice(agen(), 45))) # _Michael S. Branicky_, Mar 10 2022

