# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A323487

def isf(w): # incrementally squarefree (check factors ending in last letter)
    for l in range(1, len(w)//2 + 1):
        if w[-2*l:-l] == w[-l:]: return False
    return True
def is_bmsf(w, sfsnew): # is w bi-maximally squarefree
    lefts, rights = [c+w for c in "123"], [w+c for c in "123"]
    return all(x not in sfsnew for x in lefts + rights)
def aupton(nn):
    alst, sfs = [], set("123")
    for n in range(1, nn+1):
        sfsnew = set(w+c for w in sfs for c in "123" if isf(w+c))
        an = len([w for w in sfs if is_bmsf(w, sfsnew)])
        alst.append(an)
        sfs = sfsnew
    return alst
print(aupton(30)) # _Michael S. Branicky_, Sep 01 2021

