# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A096257

import re
from sympy import perfect_power
from decimal import *
getcontext().prec = 24
def lzs(s): return len(s) - 2 - len(s[2:].lstrip('0')) # # of leading zeros
def cond(sk, sroot, k, n): # is condition true, with precision verification
    if perfect_power(k, [n]): return False # decimal part should be all 0's
    assert lzs(sroot) + len(sk) < len(sroot) - 3, (n, "increase precision")
    return re.match("0.0*"+sk, sroot)
def a(n):
    k, power = 1, Decimal(1)/Decimal(n)
    rootk, sk = Decimal(k)**power, str(k)
    while not cond(sk, str(rootk - int(rootk)), k, n):
        k += 1
        rootk, sk = Decimal(k)**power, str(k)
    return k
print([a(n) for n in range(2, 73)]) # _Michael S. Branicky_, Aug 02 2021

