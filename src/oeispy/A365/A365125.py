# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A365125

from decimal import Decimal, getcontext, ROUND_UP, ROUND_DOWN
getcontext().prec = 100
def nm(f, df, x):
    for i in range(10):
        x -= f(x)/df(x)
    return x
def flip_rounding():
    if getcontext().rounding == ROUND_UP: getcontext().rounding = ROUND_DOWN
    else: getcontext().rounding = ROUND_UP
def get_zero(vs, rounding):
    getcontext().rounding = rounding
    def p(x,v):
        flip_rounding(); t = x-v
        flip_rounding(); return 1/t
    def dp(x,v):
        flip_rounding(); t = x-v; t = t**2
        flip_rounding(); return -1/t
    def f(x): return sum(p(x,vs[n]) for n in range(len(vs)))
    def df(x): return sum(dp(x,vs[n]) for n in range(len(vs)))
    sign = -1 if rounding == ROUND_DOWN else 1
    return nm(f, df, (vs[-1]+vs[-2])/2+sign*abs(vs[-1]-vs[-2])/3)
v_lo = [Decimal(0), Decimal(1)]
v_up = [Decimal(0), Decimal(1)]
for r in range(150):
    v_lo.append(get_zero(v_lo, ROUND_DOWN))
    v_up.append(get_zero(v_up, ROUND_UP))
lower_bounds = [v_lo[i] for i in range(0, len(v_lo), 2)]
upper_bounds = [v_up[i] for i in range(1, len(v_up), 2)]
right = True
A365125 = [int(l) for l, u in zip(str(lower_bounds[-1])[2:], str(upper_bounds[-1])[2:]) if right and (right := (l == u))]

