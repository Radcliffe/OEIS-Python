# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A119378

from sympy import isprime
from itertools import count, islice, product
from sympy.utilities.iterables import multiset_permutations as mp
def pals(base=10): # generator for all palindromes as strings
  digits = "".join(str(i) for i in range(base))
  for d in count(1):
    for p in product(digits, repeat=d//2):
        if d//2 > 0 and p[0] == "0": continue
        left = "".join(p); right = left[::-1]
        for mid in [[""], digits][d%2]: yield left + mid + right
def ok(s): # where s is string of digits
    if isprime(int(s)): return False
    return any(p[0]!="0" and isprime(int("".join(p))) for p in mp(s))
def agen():
    yield from (int(s) for s in pals() if ok(s))
print(list(islice(agen(), 43))) # _Michael S. Branicky_, Nov 27 2022

