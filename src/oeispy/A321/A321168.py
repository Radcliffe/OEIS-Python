# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A321168

from itertools import product
def isf(s): # incrementally squarefree
    for l in range(1, len(s)//2 + 1):
        if s[-2*l:-l] == s[-l:]: return False
    return True
def aupton(nn, verbose=False):
    alst, sfs = [], set("012")
    for n in range(1, nn+1):
        # max(sum(s[i:]+s[:i] in sfs for i in range(len(s))) for s in sfs)
        an = 0
        for s in sfs:
            sfconjs = 0
            for i in range(len(s)):
                if s[i:] + s[:i] in sfs: sfconjs += 1
            an = max(an, sfconjs)
            if an == n: break # short circuit maximum max
        sfsnew = set(s+i for s in sfs for i in "012" if isf(s+i))
        alst, sfs = alst+[an], sfsnew
        if verbose: print(n, an)
    return alst
print(aupton(36)) # _Michael S. Branicky_, Jul 21 2021

