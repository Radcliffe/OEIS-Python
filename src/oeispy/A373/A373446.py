# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A373446

from itertools import count,islice
from collections import Counter
from math import comb
from sympy import divisors
def euler_transform(x):
    xlist = []
    z = []
    y = []
    for n,x in enumerate(x,1):
        xlist.append(x)
        z.append(sum(d*xlist[d-1] for d in divisors(n)))
        yy = (z[-1]+sum(zz*yy for zz,yy in zip(z,reversed(y))))//n
        yield yy
        y.append(yy)
def factorizations(n,fmin=2):
    if n == 1:
        yield []
        return
    for d in divisors(n,generator=True):
        if d < fmin: continue
        for f in factorizations(n//d,d):
            yield [d]+f
def A373446_generator():
    alist = []
    def bgen():
        blist = []
        for n in count(1):
            b = 0
            for p in factorizations(n):
                if len(p) == 1: continue
                m = 1
                for k,c in Counter(p).items():
                    m *= comb(alist[k-1]-blist[k-1]+c-1,c)
                b += m
            yield b
            blist.append(b)
    for a in euler_transform(bgen()):
        yield a
        alist.append(a)
print(list(islice(A373446_generator(),60))) # _Pontus von BrÃ¶mssen_, Jun 13 2024

