# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A373941

from sympy import isprime
from itertools import count, islice, product
def pals(d, base=10): # returns a string
    digits = "".join(str(i) for i in range(base))
    for p in product(digits, repeat=d//2):
        if d//2 > 0 and p[0] == "0": continue
        left = "".join(p); right = left[::-1]
        for mid in [[""], digits][d%2]:
            yield left + mid + right
def nbp_gen(): # generator of nested binary palindromes (as strings)
    for d in count(2):
        yield from (p+p[-1-d%2::-1] for p in pals((d+1)//2, base=2))
def agen(): # generator of terms
    yield from [0, 1]
    yield from (int(nbp, 2) for nbp in nbp_gen() if nbp[0] != "0")
print(list(islice(agen(), 46)))

