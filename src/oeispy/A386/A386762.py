# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A386762

from math import isqrt
from sympy import mobius, integer_nthroot
def A386762(n):
    def squarefreepi(n): return int(sum(mobius(k)*(n//k**2) for k in range(1, isqrt(n)+1)))
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while f(kmin) < kmin: kmin >>= 1
        kmin = max(kmin,kmax >> 1)
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def g(x):
        c, l, j = 1+x-squarefreepi(integer_nthroot(x,3)[0])-squarefreepi(x), 0, isqrt(x)
        while j>1:
            k2 = integer_nthroot(x//j**2,3)[0]+1
            w = squarefreepi(k2-1)
            c += j*(l-w)
            l, j = w, isqrt(x//k2**3)
        return c+l
    def f(x): return n+x-sum(g(integer_nthroot(x, k)[0]) for k in range(2, x.bit_length()))
    return bisection(f,n,n) # _Chai Wah Wu_, Aug 11 2025

