# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A306560

from functools import lru_cache
from sympy import factorint, divisors
tetration = {2**2**2: 5, 2**2**2**2: 6, 3**3: 5, 4**4: 6, 5**5: 7}
@lru_cache(maxsize=None)
def a(n):
    res = n
    if n < 6:
        return res
    if n in tetration:
        return tetration[n]
    for i in range(1, n):
        res = min(res, a(i) + a(n-i))
    for d in [i for i in divisors(n) if i not in {1, n}]:
        res = min(res, a(d) + a(n//d))
    factors = factorint(n)
    exponents = set(factors.values())
    if len(exponents) == 1:
        e = exponents.pop()
        if e > 1:
            res = min(res, a(sum(factors.keys())) + a(e))
    return res
# _Jens Ahlstr√∂m_, Jan 11 2023

