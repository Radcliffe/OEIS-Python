# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A385713

import math
def is_perfect_square(n):
    return (math.isqrt(n)) ** 2 == n
def generate_all_solutions(radius):
    solutions = set()
    visited = set()
    # Initial known solution
    seed = (2, 2, 2, 2)
    queue = [seed]
    solutions.add(seed)
    while queue:
        quad = queue.pop(0)
        for ii in range(4):
            # Cyclically rotate variables: solve for the ii-th one
            rotated = list(quad[ii:] + quad[:ii])
            x, y, z, w = rotated
            # Use Vieta's formula: x^2 - (yzw)x + (y² + z² + w²) = 0
            product = y * z * w
            sumsq = y**2 + z**2 + w**2
            D = product**2 - 4 * sumsq
            if D < 0 or not is_perfect_square(D):
                continue
            sqrt_D = (math.isqrt(D))
            for sign in [+1, -1]:
                x_new = (product + sign * sqrt_D)
                if x_new % 2 != 0:
                    continue
                x_new //= 2
                if not (0 < x_new < radius):
                    continue
                new_quad = [x_new, y, z, w]
                if any(val >= radius for val in new_quad):
                    continue
                new_quad_sorted = tuple(sorted(new_quad))
                if new_quad_sorted not in visited:
                    solutions.add(new_quad_sorted)
                    queue.append(tuple(new_quad))
                    visited.add(new_quad_sorted)
    # Return solutions sorted by sum of elements
    return sorted([list(sol) for sol in solutions], key=lambda tup: sum(tup))
print([sum(sol) for sol in generate_all_solutions(10000000)])

