# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A385327

def freed_person_sequence_periodic(trailingUs, periodic_portion, numterms):
    freed_person_table=[[0] for i in periodic_portion]
    for i in range(numterms):
        extend_freed_person_sequence(periodic_portion, freed_person_table)
    return [(freed_person_table[0][N] - trailingUs)%(N+1)+1 for N in range(len(freed_person_table[0]))]
def extend_freed_person_sequence(periodic_portion, freed_person_table):
    for offset in range(len(periodic_portion)):
        first_death = periodic_portion[offset]
        remaining_survivor = freed_person_table[(offset + 1)%len(periodic_portion)][len(freed_person_table[offset])-1]
        if remaining_survivor + first_death + 1 < len(freed_person_table[offset])+ 1:
            freed_person_table[offset].append(remaining_survivor + first_death + 1)
        else:
            freed_person_table[offset].append((remaining_survivor + first_death + 1) % (len(freed_person_table[offset]) + 1))
def first_freers_periodic(trailingUs, periodic_portion, numterms):
    freed_seq = freed_person_sequence_periodic(trailingUs, periodic_portion, numterms)
    return [i+1 for i in range(len(freed_seq)) if freed_seq[i] == 1]
print(first_freers_periodic(0, [3], 100000000))

