# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A248831

def sqroot(a, digits):
    a = a * (10**(2*digits))
    x_prev = 0
    x_next = 1 * (10**digits)
    while x_prev != x_next:
        x_prev = x_next
        x_next = (x_prev + (a // x_prev)) >> 1
    return x_next
def primes(n):
    sieve = [True] * n
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
    return [2] + [i for i in range(3,n,2) if sieve[i]]
a = sqroot(2,300)#300 digits is arbitrary - lengthen for more digits
b = primes(10000000)#make sure to scan primes up to longest term in sequence
y = str(a)
for x in b:
    if str(x) in y:
        y = y.replace(str(x)," ",1)#replace first occurrence only
while "  " in y:
    y = y.replace("  "," ")#replace chains of spaces with a single space
z = y.split(" ")#split terms into a list
z = filter(None, z)#remove null terms
f = map(int,z)#convert to integers
print(f)
# _David Consiglio, Jr._, Jan 03 2015

