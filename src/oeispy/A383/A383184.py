# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A383184

from sympy import isprime
def diamond_number(z):
    x, y = int(z.real), int(z.imag); d = abs(x)+abs(y)
    return 2*d*(d-1)+((x if y<0 else d+y)if x>0 else 2*d-x if y>0 else 3*d-y)
def A383184(n, moves=(1, 1+1j, 1j, 1j-1, -1, -1-1j, -1j, 1-1j)):
    if not hasattr(A:=A383184, 'terms'): A.terms=[0]; A.pos=0; A.path=[0]
    while len(A.terms) <= n:
        try: _,s,z = min((1-isprime(s), s, z) for d in moves if
                         (s := diamond_number(z := A.pos+d))not in A.terms)
        except ValueError:
            raise IndexError(f"Sequence has only {len(A.terms)} terms")
        A.terms.append(s); A.pos = z; A.path.append(z)
    return A.terms[n]
A383184(999) # gives IndexError: Sequence has only 93 terms
A383184.terms # shows the full sequence
import matplotlib.pyplot as plt # this and following to plot the path:
plt.plot([z.real for z in A383184.path], [z.imag for z in A383184.path])
plt.show()

