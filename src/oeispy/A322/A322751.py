# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A322751

from itertools import permutations as perm
def num_connected_by_pairs(assigned, here=0, seen=None):
    seen = (seen, set())[seen is None]
    for proposed in [(here - 1, here), (here, here + 1)][(here % 2) == 0]:
        if proposed not in seen:
            seen.add(proposed)
            num_connected_by_pairs(assigned, assigned[proposed], seen)
    return len(seen)
def valid(assigned, pairs):
    self_give = [assigned[i] == i for i in range(len(assigned))]
    same_pair = [assigned[i] == i + 1 or assigned[i+1] == i for i in range(0, 2*pairs, 2)]
    if pairs == 0 or True in self_give + same_pair:
        return False
    num_connected = [num_connected_by_pairs(assigned, here) for here in range(2, 2*pairs, 2)]
    return min(num_connected) == 2*pairs
print([len([x for x in perm(range(2*pairs)) if valid(x, pairs)]) for pairs in range(0, 6)])

