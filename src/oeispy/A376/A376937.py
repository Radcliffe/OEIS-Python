# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A376937

from itertools import count, islice
def rs(t): # rhyme scheme of t
    s, k, m  = [], 1, dict()
    for e in t:
        if e not in m: m[e] = k; k += 1
        s.append(m[e])
    return tuple(s)
def agen(): # generator of terms
    a, R, maxL = [1], set(), 0  # maxL = max length of rhyme schemes stored
    for n in count(1):
        yield a[-1]
        for k in range(1, n+1):
            if k > maxL:  # must increase length of rhyme schemes stored
                maxL += 1
                R.update(rs(a[i:i+maxL]) for i in range(n-maxL))
            if rs(a[-k:]) not in R:
                break
        an = k
        R.update(rs(a[-i:]) for i in range(1, maxL+1))
        a.append(an)
print(list(islice(agen(), 90))) # _Michael S. Branicky_, Oct 13 2024

