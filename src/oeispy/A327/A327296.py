# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A327296

def a(n):
    #convert n to binary string
    bin_str = str(bin(n))[2:]
    #count 1's and 0's in the string
    zeros = bin_str.count('0')
    ones  = len(bin_str) - zeros
    if(ones == 1 or ones == 0):
        return ones
    pal = ""
    if(ones % 2 == 1):
        #start by placing a '1' in the middle of the string
        pal = '1'
        #place as many 0's around the central '1' as possible
        for i in range(0, zeros >> 1):
                pal = '0' + pal + '0'
    else:
        #place all 0's in the center
        for i in range(0, zeros):
            pal += '0'
    #place the remaining 1's (guaranteed to be an even number, because one '1' was placed in the middle) on either side of the palindrome
    for i in range(0, ones >> 1):
        pal = '1' + pal + '1'
    #return integer value of the constructed palindrome
    return int(pal, 2)

