# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A211214

N=12 # the maximum arity to calculate
J, K=[[[[]]]], [[[[]]]]
for n in range(1, N+1):
  J+=[[[]]] # create empty J[n][0]
  K+=[[[]]] # create empty K[n][0]
  for i in range(1, n):
    J[n]+=[[]] # create empty J[n][i]
    K[n]+=[[]]  # create empty K[n][i]
    if (i<=n-i):
      J[n][i] += J[n-i][i][:]
      K[n][i] += [[K_[0]+1]+K_[1:] for K_ in K[n-i][i]]
    for j in range(i+1, n-i+1):
      J[n][i] += [[i]+J_ for J_ in J[n-i][j]]
      K[n][i] += [[1]+K_ for K_ in K[n-i][j]]
  J[n]+=[[[n]]] # create J[n][n]
  K[n]+=[[[1]]] # create K[n][n]
J = [sum(Ji, []) for Ji in J]; K = [sum(Ji, []) for Ji in K] # merge groups
# now J[n] and K[n] represent a list of partitions of n into positive summands:
# n=J[n][i][0]*K[n][i][0]+J[n][i][1]*K[n][i][1]+J[n][i][2]*K[n][i][2]+...
# 0<J[n][i][0]<J[n][i][1]<J[n][i][2]<... -- summands; K[n][i][j]>0 -- multiplicities
list(map(lambda Ji:Ji.pop(), J)); list(map(lambda Ki:Ki.pop(), K))  # remove the trivial 1-partitions
#
import math
from functools import reduce
F=list(map(lambda J1, K1, n:list(map(lambda J2, K2: reduce(lambda res, JK: res//JK, list(map(lambda J3, K3:math.factorial(K3)*math.factorial(J3)**K3, J2, K2)), math.factorial(n)), J1, K1)), J, K, list(range(N+1))))
# F[n][i] is the number of partitions of an n-set that correspond to the partition J[n][i], K[n][i] of n.
La=[2**(2**n-n-1) for n in range(N+1)]
Ras, Ra0, R_0, R_s, P_a, V, T = [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 1], [4, 24]
for n in range(2, N+1):
  V+=[0]; T+=[0]; P_a+=[0]; Ras+=[0]; Ra0+=[0]; R_0+=[0]; R_s+=[0]
  for i in range(len(K[n])):
    R_0[n], Ra0[n], R_s[n], Ras[n] = list(map(lambda A, B, C :
      A[n] + reduce(lambda r, t:r*(B[J[n][i][t]]-C*A[J[n][i][t]])**K[n][i][t], list(range(len(K[n][i]))), ((1-C)*P_a[sum(K[n][i])]+C)*F[n][i]),
      (R_0, Ra0, R_s, Ras), (V, La, V, La), (0, 0, 1, 1)))
  R_0[n] *= 3
  P_a[n] = La[n] - Ra0[n] - 2*Ras[n]
  V[n] = 3*P_a[n] + R_0[n] + 4*R_s[n]
  T[n] = 4*(6**n)*V[n]
print("\n Reduced (A211214):", V)
print("\n Total (A211215):", T)

