# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A331261

# a Python 3.7 program to arrive at Pell-Fermat type Pythagorean triples below a given/entered number.
import math
number = None
# Taking the input from user
number = 10000000
squareList = []
subPythagoreanTriple= []
needed = 1.0
while(needed <= number):
    root = math.sqrt(needed)
    if int(root + 0.5) ** 2 == needed:
        squareList.append(needed)
        flag = True
    else:
        #print(number, "is not a perfect square")
        pass
        flag = None
    needed = needed + 1
def checkSubPythagoreanTriple():
    for i in squareList:
        SPTless = i-1
        SPTmore = i+1
        firstSide = 2*i - 1
        secondSide = 2*i + 1
        firstSideRoot = math.sqrt(firstSide)
        secondSideRoot = math.sqrt(secondSide)
        if int(firstSideRoot + 0.5) ** 2 == firstSide or int(secondSideRoot + 0.5) ** 2 == secondSide :
            if(i%2 == 1):
                subPythagoreanTriple.append(int(i-1))
                subPythagoreanTriple.append(int(i))
            else:
                subPythagoreanTriple.append(int(i))
                subPythagoreanTriple.append(int(i+1))
        else:
            pass
def main():
    checkSubPythagoreanTriple()
main()
print(str(subPythagoreanTriple))

