# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A331536

def occurrence_swaps(w, s, t):
  out, oi = [], w.find(s)
  while oi != -1:
    out.append(w[:oi] + t + w[oi+len(s):])
    oi = w.find(s, oi+1)
  return out
def moves(w): # moves for word w in miu system
  nxt = [w + w] # Rule 2 ('m' not stored; else use nxt = [w + w[1:]])
  if w[-1] == 'i': nxt.append(w + 'u')       # Rule 1
  nxt.extend(occurrence_swaps(w, 'iii', 'u')) # Rule 3
  nxt.extend(occurrence_swaps(w, 'uu', ''))   # Rule 4
  return nxt
def alst(maxd=float('inf'), v=False):
  alst, d = [], 0
  reached, frontier = {'i'}, {'i'} # don't store 'm's (else use 'mi' twice)
  alst.append(len(reached))
  if v: print(len(reached), end=", ")
  while len(frontier) > 0 and d < maxd:
    reach1 = set(m for p in frontier for m in moves(p) if m not in reached)
    if v: print(len(reached)+len(reach1), end=", ")
    alst.append(len(reached)+len(reach1))
    reached |= reach1
    frontier = reach1
    d += 1
  return alst
alst(maxd=10, v=True) # _Michael S. Branicky_, Dec 29 2020

