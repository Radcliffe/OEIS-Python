# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A346071

import numpy as np
def residual(a,b,c,d, exp=3):
    return a**exp-b**exp-c**exp-d**exp
def test(max_n,k=3):
    ans=dict()
    for a in range(max_n):
        #print(a)
        for b in range(int(np.ceil((a**k/3)**(1/k))),a):
            n3=a**k-b**k
            for c in range(int(np.ceil((n3/2)**(1/k))),b):
                m3=n3-c**k
                if m3<0:
                    break;
                l=int(np.ceil((m3)**(1/k)))
                options=[l,l-1]
                for d in options:
                    res=residual(a,b,c,d, exp=k)
                    if res==0:
                        if a in ans.keys():
                            ans[a].append((a,b,c,d))
                        else:
                            ans[a]=[(a,b,c,d)]
                        #print("found:",(a,b,c,d))
                        break
                    else:
                        #print("tested: {0}, residual: {1}".format((a,b,c,d),res))
                        if res>0:
                            break
    return ans
def serie(N):
    result=test(N)
    results_by_number_of_answers=[]
    results_by_number_of_answers.append(result)
    temp=dict()
    for k in result.keys():
        if len(result[k])>=2:
            temp[k]=result[k]
    results_by_number_of_answers.append(temp)
    i=3
    while len(temp)>0:
        temp=dict()
        for k in results_by_number_of_answers[-1].keys():
            if len(results_by_number_of_answers[-1][k])>=i:
                temp[k]=result[k]
        if len(temp)>0:
            results_by_number_of_answers.append(temp)
        i+=1
    return [next(iter(a)) for a in results_by_number_of_answers]
#Get the elements of the serie up until A_n>1000
A=serie(1000)
print(A)

