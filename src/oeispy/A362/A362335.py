# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A362335

from itertools import count, islice
def c(k, d):
    dk = list(map(int, str(k)))
    return set(abs(dk[i+1]-dk[i]) for i in range(len(dk)-1)) >= d
def agen(): # generator of terms
    an, aset = 0, {0}
    while True:
        yield an
        d = set(map(int, set(str(an))))
        an = next(k for k in count(10**len(d)) if k not in aset and c(k, d))
        aset.add(an)
print(list(islice(agen(), 41))) # _Michael S. Branicky_, May 27 2023
def A362335(n, A=[0]):
    while len(A) <= n:
        z = lambda a: zip(d := tuple(int(d) for d in str(a)), d[1:])
        D = set(str(A[-1])) ; a = 10**len(D)
        while a in A or D - set(str(abs(x-y)) for x,y in z(a)): a += 1
        A . append(a)
    return A[n] # _M. F. Hasler_, May 27 2023

