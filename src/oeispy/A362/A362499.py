# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A362499

from sympy import factorint
from sympy.utilities.iterables import multiset_permutations as mp
from itertools import count, islice, combinations_with_replacement as mc
def ndgen():
    yield from ((f,)+r for d in count(1) for f in "123456789" for r in mc("0123456789", d-1))
def c(n): # is_semiprime
    return sum(factorint(n).values()) == 2
def f(digs):
    return sum(1 for p in mp(digs) if p[0]!="0" and c(t:=int("".join(p))))
def agen(): # generator of terms
    adict, n = dict(), 0
    for t in ndgen():
        v = f(t)
        if v not in adict: adict[v] = int("".join(t))
        while n in adict: yield adict[n]; n += 1
print(list(islice(agen(), 46))) # _Michael S. Branicky_, Jun 12 2023

