# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A082553

from sympy import factorint, factorial
def make_product(p, n, k):
    '''
    Find all k-element subsets of {1, ..., n} whose product is p.
    Returns: list of lists
    '''
    if n**k < p:
        return []
    if k == 1:
        return [[p]]
    if p%n == 0:
        l = [s + [n] for s in make_product(p//n, n - 1, k - 1)]
    else:
        l = []
    return l + make_product(p, n - 1, k)
def integral_geometric_mean(n):
    '''
    Find all subsets of {1, ..., n} that contain n and whose
    geometric mean is an integer.
    '''
    f = factorial(n)
    l = [[n]]
    #Find product of distinct prime factors of n
    c = 1
    for p in factorint(n):
        c *= p
    #geometric mean must be a multiple of c
    for gm in range(c, n, c):
        k = 2
        while not (gm**k%n == 0):
            k += 1
        while gm**k <= f:
            l += [s + [n] for s in make_product(gm**k//n, n - 1, k - 1)]
            k += 1
    return l
def A082553(n):
    return len(integral_geometric_mean(n)) # _David Wasserman_, Aug 02 2019

