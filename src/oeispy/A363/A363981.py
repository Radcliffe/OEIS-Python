# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A363981

from sympy.utilities.iterables import multiset_partitions
from sympy.ntheory import factorint, prime
import math
def smallestNumWithNDivisors(n):
    partitionsOfPrimeFactors = multiset_partitions(factorint(n, multiple=True))
    candidates = []
    for partition in partitionsOfPrimeFactors:
        factorization = []
        for subset in partition:
            factorization.append(math.prod(subset))
        factorization.sort()
        factorization.reverse()
        candidate = 1
        for j in range(0, len(factorization)):
            candidate *= prime(j+1)**(factorization[j]-1)
        candidates.append(candidate)
    return min(candidates)
for k in range(1,200):
    if smallestNumWithNDivisors(2*k-1)<smallestNumWithNDivisors(2*k):
        print(k , end=', ')

