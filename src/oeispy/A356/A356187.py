# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A356187

from itertools import permutations as perm
from itertools import islice
from sympy import isprime
from math import factorial as fact
import collections
def consume(iterator, n=None):
    "Advance the iterator n-steps ahead. If n is None, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
for x in range(2,20):
    mult = range(1,x)
    count = 0
    q = perm(range(1,x))
    for y in q:
        keeppos = 0
        keepflag = False
        if y[0] != 1:#stop when the first digit is not 1
            break
        z = [mult[a] * y[a] + 1 for a in range(x-1)]
        for b in z[0:-2]:
            if not isprime(b):
                keeppos = z.index(b)
                keepflag = True
                break
        if keepflag:#skip ahead to advance the next non-prime term
            consume(q,fact(x-keeppos-2)-1)
        elif len(set(z)) == len(z) and all(isprime(b) for b in set(z)):#no duplicates and all primes
            count += 1
    print(x-1,count)
# _David Consiglio, Jr._, Aug 04 2022

