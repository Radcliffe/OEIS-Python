# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A384705

from collections import Counter
from itertools import combinations, combinations_with_replacement as cwr
from sympy.utilities.iterables import multiset_permutations as mp
def self_shuffles(w):
    sswset, n = set(), len(w)
    set2n, ssw = set(range(2*n)), [0 for i in range(2*n)]
    for s in combinations(list(range(2*n)), n):
        nots = sorted(set2n-set(s))
        for i, c in enumerate(w): ssw[s[i]] = ssw[nots[i]] = c
        sswset.add("".join(ssw))
    return sswset
def a(n):
    if n == 0: return 1
    u = 0
    for w in cwr("10", n-1):          # "base" or "sorted" roots
        c = Counter()
        for pw in mp(w):              # iterate over permutations of these
            pw = "0" + "".join(pw)    # enforce prefix 0
            sspw = self_shuffles(pw)  # build self_shuffles from these roots
            c.update(sspw)
        u += sum(1 for x in c if c[x] == 1)  # count results w/unique roots
    return u
print([a(n) for n in range(1, 10)]) # Michael S. Branicky, Jun 17 2025

