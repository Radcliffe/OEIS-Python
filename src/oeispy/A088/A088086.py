# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A088086

from gmpy2 import is_prime
from itertools import count, islice, product
def bgen(): # generator of palindromic decimal strings ending in 1, 3, 7, 9
    yield from "379"
    for digits in count(2):
        for first in "1379":
            for left in product("0123456789", repeat=(digits-2)//2):
                left = "".join(left)
                right = left[::-1]
                for mid in [[""], "0123456789"][digits%2]:
                    yield first + left + mid + right + first
def agen():
    alst, aset, concat = [2], {"2"}, "2"
    while True:
        yield alst[-1]
        g = bgen()
        s = next(g)
        while "start" in s or s in aset or not is_prime(int(concat + s)):
            s = next(g)
        concat += s
        aset.add(s)
        alst.append(int(s))
print(list(islice(agen(), 45))) # _Michael S. Branicky_, Nov 18 2023

