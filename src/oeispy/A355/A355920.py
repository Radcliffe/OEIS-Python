# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A355920

import sympy
def a(n):
    g = (n - 1) * (n - 2) / 2
    plist = list(sympy.primerange(2, n ** 4))
    plist.reverse()
    for p in plist:
        # equivalent to p-1-2*g*p**0.5 > n:
        if (p - 1 - n) ** 2 > 4 * g * g * p:
            continue
        solution = [False] * p
        r = sympy.primitive_root(p)
        rn = r ** n % p  # generator for subgroup {x^n}
        d = sympy.n_order(rn, p)  # size of subgroup {x^n}
        nth_power_list = []
        xn = 1
        for k in range(d):
            xn = xn * rn % p
            nth_power_list.append(xn)
            for yn in nth_power_list:
                solution[(xn + yn) % p] = True
        for yn in nth_power_list:  # consider the case x=0
            solution[yn] = True
        solution[0] = True
        if False in solution:
            return p
    return -1
print([a(n) for n in range(3, 18)])

