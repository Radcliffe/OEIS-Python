# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A355148

from sympy import divisors
from itertools import count, islice, product
def ispal(s): return s == s[::-1]
def pals(d, start0=False): # generates palindromic strings with d digits
    digits = "0123456789"
    if d == 1: yield from "0"*int(start0) + "123456789"; return
    for p in product(digits, repeat=d//2):
        if not start0 and p[0] == "0": continue
        left = "".join(p); right = left[::-1]
        for mid in [[""], digits][d%2]: yield left + mid + right
def agen(): # generator of terms
    for d in count(1):
        found = set()
        for p1 in pals(d):
            for p2 in pals(d):
                p = int(p1)*int(p2)
                s = str(p)
                if len(s) != 2*d: continue
                if ispal(s[:d]) and s[d] != "0" and ispal(s[d:]):
                    found.add(p)
        yield from sorted(found)
print(list(islice(agen(), 51))) # _Michael S. Branicky_, Jun 21 2022

