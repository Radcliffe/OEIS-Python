# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A369127

from collections import deque
from itertools import count, islice
def pals(start=1): # generator of palindromes >= palindrome start
    s = str(start)
    q, r = divmod(len(s)+1, 2)
    for d in count(q):
        olst = [1, 0][int(d==q and r==1):]
        for offset in olst:
            lb = max(1, 10**(d-1)) if d>q or offset!=olst[0] else int(s[:q])
            for i in range(lb, 10**d):
                left = str(i)
                yield int(left+left[::-1][offset:])
def agen(): # generator of terms
    S = deque([101])
    head = list(range(10)) + [11]
    yield from head
    used = set(head) | {101}
    pstart = {d:0 for d in "0123456789"}
    while True:
        an = S.popleft()
        yield an
        for d in str(an):
            p = next(p for p in pals(start=pstart[d]) if p not in used and d in str(p))
            pstart[d] = p
            S.append(p)
            used.add(p)
print(list(islice(agen(), 57))) # _Michael S. Branicky_, Mar 03 2024

