# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A388654

from collections import defaultdict
def spf_sieve(n):
    spf = list(range(n+1))
    for i in range(2, int(n**0.5)+1):
        if spf[i] == i:  # prime
            step = i
            start = i*i
            for j in range(start, n+1, step):
                if spf[j] == j:
                    spf[j] = i
    return spf
def factorize(x, spf):
    fac = defaultdict(int)
    while x > 1:
        p = spf[x]
        fac[p] += 1
        x //= p
    return fac
def bad_numbers_and_intervals(limit):
    """Return (bad_numbers_sorted, bad_intervals, spf) up to `limit`."""
    spf = spf_sieve(2*limit)
    bad_nums = set()
    bad_intervals = []
    for N in range(1, limit+1):
        counts = defaultdict(int)
        maxp = 0
        for H in range(0, N+1):
            k = N + H
            if k > 1:
                for p, e in factorize(k, spf).items():
                    counts[p] += e
                    if p > maxp:
                        maxp = p
            is_bad = (maxp > 0 and counts[maxp] >= 2)
            if is_bad:
                for m in range(N, N+H+1):
                    if m <= limit:
                        bad_nums.add(m)
                bad_intervals.append((N, N+H))
    return sorted(bad_nums), bad_intervals, spf

