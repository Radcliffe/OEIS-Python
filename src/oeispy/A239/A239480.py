# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A239480

from math import prod
from itertools import count, islice, product
def A031286(n):
    ap = 0
    while n > 9: n, ap = sum(map(int, str(n))), ap+1
    return ap
def A031346(n):
    mp = 0
    while n > 9: n, mp = prod(map(int, str(n))), mp+1
    return mp
def is_pal(n): return (s:=str(n)) == s[::-1]
def pals(base=10): # all d-digit palindromes
    digits = "".join(str(i) for i in range(base))
    for d in count(1):
        for p in product(digits, repeat=d//2):
            if d > 1 and p[0] == "0": continue
            left = "".join(p); right = left[::-1]
            for mid in [[""], digits][d%2]: yield int(left + mid + right)
def ok(n): return is_pal(n) and A031286(n) == A031346(n)
def agen(): yield from filter(ok, pals())
print(list(islice(agen(), 20))) # _Michael S. Branicky_, Jun 22 2023

