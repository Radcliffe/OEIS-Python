# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A280617

from collections import Counter
from functools import reduce
from itertools import combinations, chain
from operator import mul
# http://www.sympy.org
import sympy as sp
limit = 90
# credit: http://stackoverflow.com/a/16915734
# as proved, there are no Carmichael numbers with
# less than 3 prime factors, and thus modification
def powerset(iterable):
    xs = list(iterable)
    return chain.from_iterable(combinations(xs, n) for n in range(3, len(xs) + 1))
# all computed numbers will be limit-smooth
def carmichael(limit):
    for d in powerset(sp.primerange(3, limit)):
        n = reduce(mul, d, 1)
        broke = False
        for p in d:
            if (n - 1) % (p - 1) != 0:
                broke = True
                break
        if not broke:
            yield (d[-1])
# from list of pairs of (n, number_of_integers_with_n_as_greatest_prime_factor)
# creates the sequence
def prefix(lst):
    r = []
    s = 0
    rpointer = 0
    lstpointer = 0
    while lstpointer < len(lst):
        while lst[lstpointer][0] > rpointer:
            r.append(s)
            rpointer += 1
        s += lst[lstpointer][1]
        lstpointer += 1
    r.append(s + lst[-1][1])
    return r
c = Counter(carmichael(limit))
for i, e in enumerate(prefix(sorted(c.items()))):
    if i > 0:
        print(e, end=", ")

