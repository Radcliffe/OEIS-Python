# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A280407

import numpy as np
def a280417(N):
    if N > 0: yield 1
    if N > 1: yield 45
    if N <= 2: return
    prods = np.zeros(N * N, dtype=np.int32)
    prods[1] = 1 # prods[k] counts integer solutions to x*y = k with 1 <= x,y <= n
    for n in range(2, N):
        n_sq = n * n
        prods[n: n_sq: n] += 2
        prods[n_sq] += 1
        dx = (n + 1) // 2 if n % 2 else n + 1
        dy = (n - 1) // 2 if n % 2 else n - 1
        ad = prods[dx : n_sq : dx]
        bc = prods[dy : dy * ad.shape[0] + 1 : dy]
        yield (4 * n + 1) ** 2 + 8 * int(ad @ bc)
        # (4*n+1)**2 = solutions to a*d = b*c = 0 with -n <= a,b <= n.
        # ad @ bc = solutions to (n-1)*a*d = (n+1)*b*c > 0 with 1 <= a,b <= n.
        # Multiply by 8 to account for all consistent sign changes of a,b,c,d.
print(list(a280417(44))) # _David Radcliffe_, May 22 2025

