# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A268084

from itertools import product, permutations
def count_overlaps(subs, s):
  c = i = 0
  while i != -1:
    i = s.find(subs, i)
    if i != -1: c += 1; i += 1
  return c
def a(n): # only check words starting with 0 by symmetry
  ar = ("".join(u) for r in range(1, n//2+1) for u in product("01",
repeat=r))
  abel_squares = set(w+"".join(wp) for w in ar for wp in permutations(w))
  words = ("0"+"".join(w) for w in product("10", repeat=n-1))
  themin = n*n
  for w in words:
    numw = 0
    for s in abel_squares:
      numw += count_overlaps(s, w)
      if numw >= themin: break
    else: themin = min(themin, numw)
  return themin
print([a(n) for n in range(1, 14)]) # _Michael S. Branicky_, Dec 20 2020

