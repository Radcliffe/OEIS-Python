# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A387912

from functools import lru_cache
# change values for the endpoint t=(n,n,n) and the height bound bd=k
t = (5, 5, 5)
bd = 5
def ht(t):
    """Height function h(x0, x1, x2) = 2*x0 - x1 - x2."""
    return 2 * t[0] - t[1] - t[2]
@lru_cache(maxsize=None)
def altern(x0, x1, x2, bd):
    """
    Number of 3D ballot paths from (0,0,0) to (x0,x1,x2)
    with the constraints:
      - x0 >= x1 >= x2 at all times (ballot condition)
      - height <= bd when stepping in x1 or x2
    """
    if (x0, x1, x2) == (0, 0, 0):
        return 1
    count = 0
    if x0 > 0 and x0 - 1 >= x1:
        count += altern(x0 - 1, x1, x2, bd)
    if x1 > 0 and x1 - 1 >= x2 and ht((x0, x1 - 1, x2)) <= bd:
        count += altern(x0, x1 - 1, x2, bd)
    # step along x2 (height cap)
    if x2 > 0 and ht((x0, x1, x2 - 1)) <= bd:
        count += altern(x0, x1, x2 - 1, bd)
    return count
@lru_cache(maxsize=None)
def exact_height(x0, x1, x2, bd):
    if bd < 0:
        return 0
    return altern(x0, x1, x2, bd) - altern(x0, x1, x2, bd - 1)
print(exact_height(*t, bd))

