# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A387388

def partitions_distinct(n):
    def _build(remaining, max_next):
        if remaining == 0:
            return [[]]
        res = []
        for k in range(min(remaining, max_next), 0, -1):
            for tail in _build(remaining - k, k - 1):
                res.append([k] + tail)
        return res
    return _build(n, n//2) # The biggest number in the subset can't be bigger than n/2
def count_half_subsets(partition, n):
    if n % 2:
        return 0
    half = n // 2
    dp = [0] * (half + 1)
    dp[0] = 1
    for x in partition:
        for s in range(half, x - 1, -1):
            dp[s] += dp[s - x]
    return int(dp[half]/2) #-> to not count {X}={Y} and {Y}={X} as two different solutions
#---- Generate Sequence -----
sequence = []
max_n=25  #number of terms
for N in range(1, max_n):
    parts = partitions_distinct(2*N)
    max_sols = 0
    for p in parts:
        subsets = count_half_subsets(p, 2*N)
        if subsets > max_sols:
            max_sols = subsets
    sequence.append(max_sols)

