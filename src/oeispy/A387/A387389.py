# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A387389

def partitions_distinct(n):
    def _build(remaining, max_next):
        if remaining == 0:
            return [[]]
        res = []
        for k in range(min(remaining, max_next), 0, -1):
            for tail in _build(remaining - k, k - 1):
                res.append([k] + tail)
        return res
    return _build(n, n//2) # The biggest number in the subset can't be bigger than n/2
def count_half_subsets(partition, n):
    if n % 2:
        return 0
    half = n // 2
    dp = [0] * (half + 1)
    dp[0] = 1
    for x in partition:
        for s in range(half, x - 1, -1):
            dp[s] += dp[s - x]
    return int(dp[half]/2) #-> to not count {X}={Y} and {Y}={X} as two different solutions
#---- Generate Sequence -----
max_n = 15 #number of terms
sequence = []
for n in range(1, max_n):
    p_N_exists = False
    N=1
    while p_N_exists==False:
        partes = partitions_distinct(2*N)
        for p in partes:
            subsets = count_half_subsets(p, 2*N)
            if subsets == n:
                sequence.append(2*N)
                p_N_exists = True
                break
        N = N+1

