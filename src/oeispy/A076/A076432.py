# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A076432

from itertools import count, islice
from sympy import mobius, integer_nthroot
def A076432_gen(): # generator of terms
    def f(x): return int(x+sum(mobius(k)*(integer_nthroot(x,k)[0]-1) for k in range(2,x.bit_length())))
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    a = bisection(f)
    b = bisection(lambda x:f(x)+1,a,a)
    c = bisection(lambda x:f(x)+2,b,b)
    d = bisection(lambda x:f(x)+3,c,c)
    for i in count(4):
        e = bisection(lambda x:f(x)+i,d,d)
        if d-a < e-d:
            yield d
        a,b,c,d=b,c,d,e
A076432_list = list(islice(A076432_gen(),5)) # _Chai Wah Wu_, Sep 09 2024

