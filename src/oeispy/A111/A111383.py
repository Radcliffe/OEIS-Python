# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A111383

from gmpy2 import digits, is_prime, mpz
from itertools import count, islice, product
def bgen(): # generator of terms of A007500 -{2, 5} as strings
    yield from "37"
    p = 11
    for digits in count(2):
        for first in "1379":
            for mid in product("0123456789", repeat=digits-2):
                for last in "1379":
                    s = first + "".join(mid) + last
                    if is_prime(mpz(s)) and is_prime(mpz(s[::-1])):
                        yield s
def agen(): # generator of terms
    s, r, an, san = "", "", 3, "3"
    while True:
        yield int(an)
        s, r = s+san, san[::-1]+r
        for san in bgen():
            if is_prime(mpz(s+san)) and is_prime(mpz(san[::-1]+r)):
                break
        an = mpz(san)
print(list(islice(agen(), 34))) # _Michael S. Branicky_, Jan 02 2025

