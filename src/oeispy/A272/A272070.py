# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A272070

# program is unoptimized, slow for n > 5, rather for illustration
def A272070(n, sol=None): # return solution (path) with index sol if given
    if not hasattr(A:=A272070,'sol'): A.sol=[[[]]]
    while n >= len(A.sol):
        L = len(A.sol); width = 2*L+1; A.sol.append(N := [])
        path = [pos := 1+1j]; todo = [pos+2]; steps = 1,1j,-1j,-1
        used = lambda pos: any(pos*s in path for s in steps)
        while todo:
            if pos := todo.pop():
                if width in (abs(pos.real),abs(pos.imag)):
                    N . append(tuple(path+[pos]))
                elif go := [p for s in steps if not used(p := pos+2*s)]:
                    path += [pos]; todo += [0]; todo += go
            else: path.pop()
    return len(A.sol[n]) if sol is None else A.sol[n][sol]
from matplotlib.pyplot import plot,show # only needed for plotting
def A272070_plot(n, sol): # to plot the solution w/ index sol
    for s in (1, 2*n+1): # outer frame and central square
        plot(*([(s:=-s)if(i-j)&1 else s for i in range(5)]for j in range(2)))
    for i in range(4):
        path = [1j*p for p in path] if i else A272070(n,sol)
        plot([p.real for p in path], [p.imag for p in path])
    show(); return path # _M. F. Hasler_, Jun 14 2025

