# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A389262

from math import comb
# Dynamic integer factorials
factorials = [1]  # factorials[n] = n!
def fact(n):
    while len(factorials) <= n:
        factorials.append(factorials[-1] * len(factorials))
    return factorials[n]
# Correct A068424 factor for the recurrence
# A068424(n, k) = binomial(n, k) * k!
def A068424(n, k):
    if k == 0:
        return 0
    return comb(n, k) * fact(k)
# Memoized function to calculate P(n, k) via single recurrence
def P(n, k, memo):
    if k >= n:
        return fact(n)
    if n == 0:
        return 1
    if (n, k) in memo:
        return memo[(n, k)]
    # recurrence
    result = n * P(n - 1, k, memo) - P(n - k - 1, k, memo) * A068424(n - 1, k)
    memo[(n, k)] = result
    return result
# Generator of sequence a(n)
def generate_a():
    n = 1
    memo = {}
    while True:
        nf = fact(n)
        for k in range(1, n + 1):
            if P(n, k, memo) > nf // 2:  # exact integer comparison
                yield k
                break
        n += 1
# Example: first 610 terms
gen = generate_a()
seq = [next(gen) for _ in range(610)]
print(seq)

