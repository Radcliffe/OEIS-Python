# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A389148

import sympy as sp
import numpy as np
N = 1600
primes = list(sp.primerange(2, N+1))
table = np.zeros((N+1, len(primes)), dtype=np.uint8)
for n in range(2, N+1):
    factors = sp.factorint(n)
    for j, p in enumerate(primes):
        if p in factors:
            table[n, j] = factors[p] % 2
def test(e): # assumes 6 < e <= N
    fac1 = np.zeros(len(primes), dtype=np.uint8)
    for d in reversed(range(1,e)):
        if d+1 in primes:
            return False
        fac1 += table[d+1]
        for c in reversed(range(1,d)):
          fac2 = fac1 % 2
          for b in reversed(range(1,c)):
              if b+1 in primes:
                  if fac1[primes.index(b+1)] == 0:
                      break
              fac2 += table[b+1]
              fac3 = fac2 % 2
              for a in range(1,b):
                  fac3 += table[a]
                  if np.all(fac3 % 2 == 0):
                      return True
    return False

