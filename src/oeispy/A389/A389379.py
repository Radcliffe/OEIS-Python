# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A389379

from collections import Counter
from itertools import count, islice, permutations
from sympy.utilities.iterables import multiset_permutations
def AB_gen(): # generator of terms
    for A in count(1):
        msA, msA2, msB, bigger = Counter(str(A)), Counter(str(A**2)), [], True
        if set(msA) - set(msA2): continue
        for e in sorted(msA2):
            if msA2[e] < msA[e]:
                bigger = False
                break
            msB.extend([e]*(msA2[e]-msA[e]))
        if not bigger or msB == []: continue
        for mp in multiset_permutations(msB):
            B = int("".join(map(str, mp)))
            if B < A: continue
            msB2 = Counter(str(B**2))
            if msA2 == msB2:
                yield A, B
print([A for A, B in islice(AB_gen(), 39)]) # _Michael S. Branicky_, Oct 02 2025

