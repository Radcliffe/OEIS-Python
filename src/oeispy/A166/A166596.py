# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A166596

from math import isqrt
from collections import Counter
from itertools import count, islice, combinations_with_replacement as mc
def tris(d): # generator of triangular numbers with d digits
    ilb, lb, ub = isqrt(2*10**(d-1))-1, 10**(d-1), 10**d
    if d == 1: yield 0
    for i in count(ilb):
        t = i*(i+1)//2
        if t < lb: continue
        elif t >= ub: break
        yield t
def agen(): # generator of sequence terms
    n, adict = 1, dict()
    for d in count(1):
        c = Counter("".join(sorted(str(t))) for t in tris(d))
        for t in tris(d):
            v = c["".join(sorted(str(t)))]
            if v not in adict: adict[v] = t
            while n in adict: yield adict[n]; n += 1
print(list(islice(agen(), 46))) # _Michael S. Branicky_, Feb 18 2024

