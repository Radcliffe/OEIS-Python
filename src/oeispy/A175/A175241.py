# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A175241

from itertools import count, islice, product
def is_bin_pal(n): return (b:=bin(n)[2:]) == b[::-1]
def bin_pals(): # generator of positive binary palindromes in base 10
    yield 1
    digits, midrange = 2, [[""], ["0", "1"]]
    for digits in count(2):
        for p in product("01", repeat=digits//2-1):
            left = "1"+"".join(p)
            for middle in midrange[digits%2]:
                yield int(left + middle + left[::-1], 2)
def agen(): # generator of terms
    g = bin_pals(); next(g)
    for n in count(3):
        bn = next(g)
        yield next(k*bn for k in bin_pals() if not is_bin_pal(k*bn))
print(list(islice(agen(), 46))) # _Michael S. Branicky_, Jan 09 2023

