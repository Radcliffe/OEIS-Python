import os

from read_oeis import OEISReader

def remove_python_files():
    """
    Remove all Python files in the oeispy directory.
    """
    for root, _, files in os.walk("oeispy"):
        for file in files:
            if file.endswith(".py") and not file.endswith("__init__.py"):
                os.remove(os.path.join(root, file))
                print(f"Removed {file}")


def write_python_code(python_lines, sequence_number, index):
    """
    Write the extracted Python code to a file.

    Args:
        python_lines (list): The list of lines of Python code.
        sequence_number (str): The OEIS sequence number.
        index (int): The version of the OEIS data.
    """
    prefix = sequence_number[:4]
    dest_dir = f"oeispy/{prefix}"
    os.makedirs(dest_dir, exist_ok=True)
    if index > 1:
        dest_file = f"{dest_dir}/{sequence_number}_{index}.py"
    else:
        dest_file = f"{dest_dir}/{sequence_number}.py"
    with open(dest_file, 'w') as f:
        f.write("# This file is auto-generated from OEIS data.\n")
        f.write("# Please do not edit this file directly.\n")
        f.write(f"# OEIS sequence: {sequence_number}\n")
        f.write("\n")
        for line in python_lines:
            f.write(line + "\n")
        f.write("\n")
    python_lines.clear()
    # Ensure that directory contains __init__.py
    init_file = os.path.join(dest_dir, "__init__.py")
    if not os.path.exists(init_file):
        with open(init_file, 'w') as init_f:
            init_f.write("# This file is auto-generated to make the directory a package.\n")
            init_f.write("# Please do not edit this file directly.\n")
    # Ensure that parent directory contains __init__.py
    parent_dir = os.path.dirname(dest_dir)
    parent_init_file = os.path.join(parent_dir, "__init__.py")
    if not os.path.exists(parent_init_file):
        with open(parent_init_file, 'w') as parent_init_f:
            parent_init_f.write("# This file is auto-generated to make the directory a package.\n")
            parent_init_f.write("# Please do not edit this file directly.\n")


    print(f"Wrote to {dest_file}")


def has_non_comment(python_lines):
    """
    Check if the list of Python lines contains any non-comment lines.

    Args:
        python_lines (list): The list of lines of Python code.

    Returns:
        bool: True if there are non-comment lines, False otherwise.
    """
    for line in python_lines:
        line = line.strip()
        if line and not line.startswith('#'):
            return True
    return False


def extract_python_code_from_file(file_path):
    """
    Extracts Python code from a given file.

    Args:
        file_path (str): The path to the file from which to extract Python code.

    Returns:
        str: The extracted Python code.
    """

    reader = OEISReader(file_path)
    sequence_number = file_path.rsplit('/', maxsplit=1)[-1].replace('.seq', '')
    reader.read_file()
    index = 1
    python_lines = []
    for line in reader.lines:
        if line.language != "Python":
            continue
        line = line.content.rstrip()
        if line.startswith('(Python)'):
            if len(python_lines) > 0:
                write_python_code(python_lines, sequence_number, index)
                index += 1
            line = line[8:].lstrip()
        if line:
            if line.lower().lstrip().startswith('see '):
                continue
            python_lines.append(line)
    if has_non_comment(python_lines):
        write_python_code(python_lines, sequence_number, index)


def test_extract_python_code_from_file():
    """
    Test the extract_python_code_from_file function.
    """
    file_path = "../oeisdata/seq/A034/A034874.seq"
    extract_python_code_from_file(file_path)


if __name__ == "__main__":
    # Define the OEIS data directory
    oeis_data_dir = "../oeisdata/seq"
    # Remove existing Python files in the oeispy directory
    remove_python_files()
    # Walk through the directory and extract Python code from each file
    for root, _, files in sorted(os.walk(oeis_data_dir)):
        print(f"Processing directory: {root}")
        for file in files:
            if file.endswith(".seq"):
                filepath = os.path.join(root, file)
                extract_python_code_from_file(filepath)
