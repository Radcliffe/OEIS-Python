# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A376702

def f(n, i=2): return [n] if n < i else [*f(n//i, i=i+1), n%i]
def ok(n):
    fnz = [d for d in f(n) if d != 0]
    return len(fnz) == len(set(fnz)) and fnz == sorted(fnz, reverse=True)
print([k for k in range(1, 411) if ok(k)]) # _Michael S. Branicky_, Oct 02 2024
 # faster for initial segment of sequence
from math import factorial
from itertools import count, islice
def bgen(d, i): # strictly decreasing non-zero elmts <= i and dth digit from left <= d
    if d < 1: yield tuple(); return
    yield from ((j,) + t for j in range(0, min(i+1, d+1)) for t in bgen(d-1, i if j == 0 else j-1))
def agen(): # generator of terms
    for digits in count(1):
        for first in range(1, digits+1):
            for rest in bgen(digits-1, first-1):
                t = (first, ) + rest
                yield sum(factorial(i)*d for i, d in enumerate(t[::-1], 1))
print(list(islice(agen(), 60))) # _Michael S. Branicky_, Oct 02 2024

