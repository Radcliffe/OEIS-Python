# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A376273

from itertools import count, islice, combinations_with_replacement as mc
def f(n): return (d:=list(map(int, str(n))))[0] * sum(di*di for di in d)
def iters(n):
    if n == 1: return 0
    traj, c = {n}, 0
    while (n:=f(n)) not in traj: traj.add(n); c += 1
    return c if 1 in traj else float('inf')
def bgen():
    yield from (int(f+"".join(m)) for d in count(1) for f in "123456789" for m in mc("0123456789", d-1))
def agen(): # generator of terms
    adict, n = dict(), 0
    for k in bgen():
        v = iters(k)
        if v not in adict:
            adict[v] = k
            while n in adict: yield adict[v]; n += 1
print(list(islice(agen(), 13))) # _Michael S. Branicky_, Sep 18 2024

