# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A342950

A342950_list, n = [], 1
while n < 10**9:
    if n % 10:
        m = n
        for p in (2,3,5,7):
            q, r = divmod(m,p)
            while r == 0:
                m = q
                q, r = divmod(m,p)
        if m == 1:
            A342950_list.append(n)
    n += 1 # _Chai Wah Wu_, Mar 31 2021
from sympy import integer_log
def A342950(n):
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def f(x):
        c = n+x
        for i in range(integer_log(x,7)[0]+1):
            for j in range(integer_log(m:=x//7**i,3)[0]+1):
                c -= (k:=m//3**j).bit_length()+integer_log(k,5)[0]
        return c
    return bisection(f,n,n) # _Chai Wah Wu_, Sep 17 2024
 # faster for initial segment of sequence
import heapq
from itertools import islice
def A342950gen(): # generator of terms
    v, oldv, h, psmooth_primes, = 1, 0, [1], [2, 3, 5, 7]
    while True:
        v = heapq.heappop(h)
        if v != oldv:
            yield v
            oldv = v
            for p in psmooth_primes:
                if not (p==2 and v%5==0) and not (p==5 and v&1==0):
                    heapq.heappush(h, v*p)
print(list(islice(A342950gen(), 65))) # _Michael S. Branicky_, Sep 17 2024

