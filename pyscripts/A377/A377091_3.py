# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A377091

from math import isqrt
from itertools import count, islice
def cond(n): return isqrt(n)**2 == n
def agen(): # generator of terms
    an, aset, m = 0, {0}, 1
    for n in count(0):
        yield an
        an = next(s for k in count(m) for s in [k, -k] if s not in aset and cond(abs(an-s)))
        aset.add(an)
        while m in aset and -m in aset: m += 1
print(list(islice(agen(), 62))) # _Michael S. Branicky_, Dec 25 2024
from math import sqrt
def a_list(b: int, a: list[int] = [0], i: int = 1) -> list[int]:
    if sqrt(abs(a[-1] - i)).is_integer() and not (i in a):
        a += [i]
        if b < len(a):
            return a
        else:
            return a_list(b, a)
    else:
        return a_list(b, a, int(i < 0) - i)
print(a_list(40))  # _Peter Luschny_, Jan 20 2025
class A377091: # A377091(n) gives a(n)
    terms = [0]; N = 1 # next candidate
    def __new__(A, n): A.extend(A, n-len(A.terms)+1); return A.terms[n]
    def extend(A, n): any((k:=A.N) in A.terms and setattr(A, 'N', k:=(k<0)-k) or
        A.terms.append(next(k for _ in range(9**9) if (abs(A.terms[-1]-k)**.5)
       .is_integer() and k not in A.terms or not(k:=(k<0)-k))) for _ in range(n))
# _M. F. Hasler_, Feb 08 2025

