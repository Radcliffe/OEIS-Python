# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A059379

from functools import cache
def MoebiusTrans(a, i):
    @cache
    def mb(n, d = 1):
          return d % n and -mb(d, n % d < 1) + mb(n, d + 1) or 1 // n
    def mob(m, n): return mb(m // n) if m % n == 0 else 0
    return sum(mob(i, d) * a(d) for d in range(1, i + 1))
def Jrow(n, size):
    return [MoebiusTrans(lambda m: m ** n, k) for k in range(1, size)]
for n in range(1, 8): print(Jrow(n, 13))
# Alternatively:
from sympy import primefactors as prime_divisors
from fractions import Fraction as QQ
from math import prod as product
def J(n: int, k: int) -> int:
    t = QQ(pow(k, n), 1)
    s = product(1 - QQ(1, pow(p, n)) for p in prime_divisors(k))
    return (t * s).numerator  # the denominator is always 1
for n in range(1, 8): print([J(n, k) for k in range(1, 13)])
# _Peter Luschny_, Dec 16 2023

