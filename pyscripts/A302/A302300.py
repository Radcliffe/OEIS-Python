# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A302300

def frequencies(partition, n):
    tot = 0
    freq_list = []
    i = 0
    for p in partition:
        freq = [0 for i in range(n+1)]
        for i in p:
            freq[i] += 1
        for f in freq:
            if f == 0:
                tot += 1
        freq_list.append(freq)
    return freq_list
def sum_square_freqs_of_one(freq_part):
    tot = 0
    for f in freq_part:
        count = 0
        for i in f:
            if i == 1:
                count += 1
        tot += count*count
    return tot
import sympy.combinatorics
def A302300(n): # rewritten by _R. J. _Mathar_, 2023-03-24
    a =0
    if n ==0 :
        return 0
    part = sympy.combinatorics.IntegerPartition([n])
    partlist = []
    while True:
        part = part.next_lex()
        partlist.append(part.partition)
        if len(part.partition) <=1 :
            break
    freq_part = frequencies(partlist, n)
    return sum_square_freqs_of_one(freq_part)
for n in range(20): print(A302300(n))

