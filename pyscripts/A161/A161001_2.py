# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A161001

from itertools import groupby
def ok(n):
  runlengths = [len(list(g)) for k, g in groupby(bin(n)[2:])]
  minrl = min(runlengths)
  return sorted(runlengths) == list(range(minrl, minrl+len(runlengths)))
print([n for n in range(1, 2021) if ok(n)]) # _Michael S. Branicky_, Jan 04 2021
 # alternate that directly generates terms
from itertools import permutations
def runlengths(k, r): # all terms with runlengths a permutation of k, ..., r
  c = ['1', '0']
  return sorted([int("".join([c[j%2]*p[j] for j in range(r-k+1)]), 2)
    for p in permutations(range(k, r+1))])
def aupto(nn):
  digits, k, r, out = 1, 1, 1, []
  while len(out) < nn:
    for r in range(1, digits + 1):
      for k in range(1, r + 1):
        if sum(range(k, r+1)) == digits:
          out += runlengths(k, r)
    digits += 1
  return sorted(set(out))[:nn]
print(aupto(56)) # _Michael S. Branicky_, Jan 04 2021

