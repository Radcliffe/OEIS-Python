# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A000612

def partition(n, I=1):
  yield () if n==0 else (n,)
  for i in range(I, n//2 + 1):
    for p in partition(n-i, i):
      yield (i,) + p
def a(n):
  import math, operator, functools
  fracs = [(1<<(sum(functools.reduce(operator.mul, (1<<math.gcd(t, li) for li in l), 1) for t in range(1, w+1))//w), functools.reduce(operator.mul, (j**c*math.factorial(c) for j in range(1, max(l,default=0)+1) for c in (sum(li==j for li in l),)), 1)) for l in partition(n) for w in (math.lcm(*l),)]
  return next(iter(sum(x*(m//y) for x, y in fracs)//m//2 for m in (math.lcm(*(z for _, z in fracs)),)))
[a(n) for n in range(13)] # _Gregory Morse_, Dec 23 2024

