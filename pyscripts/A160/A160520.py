# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A160520

import math
def findperiod( d ) :
    if len(d) == 0 :
        return 0
    for p in range( 1, len(d) - 1 ) :
        isPeriod = True
        for i in range(0, p) :
            for j in range(i + p, len(d), p ) :
                if not d[i] == d[j] :
                    isPeriod = False
                    break
            if not isPeriod :
                break
        if isPeriod :
            return len( set( d[:p] ) )
    return -1
def nextv( a, b, n, less = True ) :
    # print a, b, a[1]*a[1], n * a[0] * a[0]
    d = -1
    while (a[1]*a[1] < n * a[0] * a[0]) == less :
        d += 1
        a = ( a[0] + b[0], a[1] + b[1] )
    a = ( a[0] - b[0], a[1] - b[1] )
    return d, a, b
def generated( n ) :
    maxperiod = 100
    s = int( math.sqrt( n ) )
    if s * s == n :
        return []
    a = (1, 0)
    b = (0, 1)
    ds = []
    for i in range( maxperiod ):
        d, b, a = nextv( a, b, n )
        ds.append( d )
        d, b, a = nextv( a, b, n, less = False )
        ds.append( d )
    return ds[1:]
maxn = 1000
ns = [x for x in range( maxn ) if not int( math.sqrt( x ) ) ** 2 == x ]
v = list(map( findperiod, map( generated, ns ) ))
if v.count( -1 ) == 0 :
    print(v)

