# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A160786

# Could be memoized for speedup
def numoddpart(n, m=1):
    """The number of partitions of n into an odd number of parts of size at least m"""
    if n < m:
        return 0
    elif n == m:
        return 1
    else:
        # 1 (namely n = n) and all partitions of the form
        # k + even partitions that start with >= k
        return 1 + sum([numevenpart(n - k,  k) for k in range(m, n//3 + 1)])
def numevenpart(n, m=1):
    """The number of partitions of n into an even number of parts of size at least m"""
    if n < 2*m:
        return 0
    elif n == 2*m:
        return 1
    else:
        return sum([numoddpart(n - k,  k) for k in range(m,  n//2 + 1)])
[numoddpart(n) for n in range(1, 70, 2)]
# dict to memoize
ps = {(0,0): 1}
def p(n, k):
    """Number of partitions of n into exactly k parts"""
    if (n,k) in ps: return ps[(n,k)]
    if (n<=0) or (k<=0): return 0
    ps[(n,k)] = p(n-k,k) + p(n-1,k-1)
    return ps[(n,k)]
def a(n): return sum([p(2*n+1, k) for k in range(1,2*n+3,2)])
[a(n) for n in range(0,41)]
# _Leo C. Stein_, Nov 11 2020

