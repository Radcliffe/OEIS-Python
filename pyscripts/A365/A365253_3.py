# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A365253

from itertools import product
def f(s): # (3+)-free
    for l in range(1, (len(s)-1)//3 + 1):
      for i in range(len(s) - 3*l):
          if s[i:i+l] == s[i+l:i+2*l] == s[i+2*l:i+3*l] and s[i]==s[i+3*l]:
             return False
    return True
def a(n):
    if n == 0: return 1
    return 2*sum(1 for w in product("01", repeat=n-1) if f("0"+"".join(w)))
print([a(n) for n in range(16)]) # _Michael S. Branicky_, Aug 29 2023
 # faster, but > memory, for initial segment of sequence
from itertools import islice
def incf(s): # incrementally (3+)-free
    for l in range(1, (len(s)-1)//3 + 1):
        if s[-3*l-1:-2*l-1]==s[-2*l-1:-l-1]==s[-l-1:-1] and s[-3*l-1]==s[-1]:
            return False
    return True
def agen():
    yield 1
    F = set("0")
    while True:
        yield 2*len(F)
        Fnew = set(c+i for c in F for i in "01" if incf(c+i))
        F = Fnew
print(list(islice(agen(),21))) # _Michael S. Branicky_, Aug 29 2023
from re import compile
def A365253(n):
    if n == 0: return 1
    r = compile(r'(.)(.*)\1\2\1\2\1')
    return 2*sum(not r.search(format(k,f'0{n}b')) for k in range(2**(n-1))) # _Pontus von Br√∂mssen_, Aug 29 2023

