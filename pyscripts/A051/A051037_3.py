# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A051037

def isok(n):
  while n & 1 == 0: n >>= 1
  while n % 3 == 0: n //= 3
  while n % 5 == 0: n //= 5
  return n == 1 #  _DarÃ­o Clavijo_, Dec 30 2022
from sympy import integer_log
def A051037(n):
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def f(x):
        c = n+x
        for i in range(integer_log(x,5)[0]+1):
            for j in range(integer_log(y:=x//5**i,3)[0]+1):
                c -= (y//3**j).bit_length()
        return c
    return bisection(f,n,n) # _Chai Wah Wu_, Sep 16 2024
 # faster for initial segment of sequence
import heapq
from itertools import islice
def A051037gen(): # generator of terms
    v, oldv, h, psmooth_primes, = 1, 0, [1], [2, 3, 5]
    while True:
        v = heapq.heappop(h)
        if v != oldv:
            yield v
            oldv = v
            for p in psmooth_primes:
                    heapq.heappush(h, v*p)
print(list(islice(A051037gen(), 65))) # _Michael S. Branicky_, Sep 17 2024

