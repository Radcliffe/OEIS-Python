# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A307732

from numba import njit
@njit
def aupto(nn, v=False):
  alst = [1, 2, 4, 8]
  if nn <= 4: return alst[:nn+1]
  n, prev_as = 4, [0, 1, 2, 3]  # |w|=3, w0 = 0, no a.s.'s except 01, 10
  while n <= nn:
    new_as = []
    for w in prev_as:
      for b in [0, 1]:
        wb = 2*w + b
        for k in range(2, n//2+1):
          mask2 = (1<<k) - 1
          mask1 = mask2 << k
          if (wb&mask2)^((wb&mask1)>>k)==mask2: break # wb ends with an a.s.
        else: new_as.append(wb) # no break
    alst.append(2*len(new_as))  # twice that starting with 0 by symmetry
    if v: print(n, 2*len(new_as), alst)
    prev_as = new_as
    n += 1
  return alst
print(aupto(30)) # _Michael S. Branicky_, Jan 06 2021

