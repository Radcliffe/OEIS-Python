# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A090423

# Primes = [2,...,607]
from sympy import sieve
primes = list(sieve.primerange(1, 608))
def tryPartioning(binString):   # First digit is not 0
    l = len(binString)
    for t in range(2, l-1):
        substr1 = binString[:t]
        if (int('0b'+substr1,2) in primes) or (t>=4 and tryPartioning(substr1)):
            substr2 = binString[t:]
            if substr2[0]!='0':
                if (int('0b'+substr2,2) in primes) or (l-t>=4 and tryPartioning(substr2)):
                    return 1
    return 0
for p in primes:
    if tryPartioning(bin(p)[2:]):
        print(p, end=',')
from sympy import isprime, primerange
def ok(p):
  b = bin(p)[2:]
  for i in range(2, len(b)-1):
    if isprime(int(b[:i], 2)) and b[i] != '0':
      if isprime(int(b[i:], 2)) or ok(int(b[i:], 2)): return True
  return False
def aupto(lim): return [p for p in primerange(2, lim+1) if ok(p)]
print(aupto(607)) # _Michael S. Branicky_, May 16 2021

