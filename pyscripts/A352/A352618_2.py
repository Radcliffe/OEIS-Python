# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A352618

from itertools import count, islice
def agen():
    for i in count(1):
        k = i
        for p in [2, 3, 5, 7]:
            while k%p == 0:
                k //= p
        if k == 1:
            yield i*i
print(list(islice(agen(), 50)))
from sympy import integer_log
def A352618(n):
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def f(x):
        c = n+x
        for i in range(integer_log(x,7)[0]+1):
            for j in range(integer_log(m:=x//7**i,5)[0]+1):
                for k in range(integer_log(r:=m//5**j,3)[0]+1):
                    c -= (r//3**k).bit_length()
        return c
    return bisection(f,n,n)**2 # _Chai Wah Wu_, Sep 17 2024

