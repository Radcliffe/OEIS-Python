# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A352329

from itertools import permutations
def pmap(s, m): return sum(s[i-1]*10**(m-i) for i in range(1, len(s)+1))
def agen():
  m = 1
  while True:
    for s in permutations(range(1, m+1)): yield pmap(s, m)
    m += 1
def aupton(terms):
  alst, g = [], agen()
  while len(alst) < terms: alst += [next(g)]
  return alst
def is_perfect_square(n):
        return round(n ** 0.5) ** 2 == n
print([x for x in aupton(5000000) if is_perfect_square(x)])
from itertools import count, islice, permutations
from sympy import integer_nthroot
def A352329_gen(): # generator of terms
    for l in count(1):
        if (r := l*(l+1)//2 % 9) == 0 or r == 1 or r == 4 or r == 7:
            m = tuple(10**(l-i-1) for i in range(l))
            for p in permutations(range(1,l+1)):
                if integer_nthroot(n := sum(prod(k) for k in zip(m,p)),2)[1]:
                    yield n
A352329_list = list(islice(A352329_gen(),10)) # _Chai Wah Wu_, Mar 21-22 2022

