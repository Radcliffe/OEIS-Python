# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A352426

def fill(rows, queens, leftattack, notdownattack, rightattack, color):
    global c
    available = ~leftattack & notdownattack & ~rightattack & color
    if rows==1:
        if available==0:
            c[queens] = c.get(queens, 0) + 1
        else:
            c[queens+1] = c.get(queens+1, 0) + bin(available).count('1')
        return
    while available:
        attack = available & -available
        fill(rows-1, queens+1, (leftattack|attack)<<1, notdownattack&~attack, (rightattack|attack)>>1, ~color)
        available &= available - 1
    fill(rows-1, queens, leftattack<<1, notdownattack, rightattack>>1, ~color)
print(' n a(n)    count')
for n in range(1, 32):
    c=dict()
    fill(n, 0, 0, (1<<n)-1, 0, 0x2AAAAAAA)
    c[0] = 0; m = max(c.keys())
    print('%(argument)2d %(value)4d %(count)8d' % {"argument" : n, "value" : m, "count" : c[m]})

