# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A054845

from sympy import primerange
def aupton(nn): # modification of PARI by Zak Seidov
    alst = [0 for n in range(nn+1)]
    for x in primerange(2, nn+1):
        s = x
        alst[s] += 1
        for y in primerange(x+1, nn+1):
            s += y
            if s <= nn:
                alst[s] += 1
            else:
                break
    return alst
print(aupton(101)) # _Michael S. Branicky_, Feb 17 2022
 # alternate version for going to large n
import heapq
from sympy import prime
from itertools import islice
def agen(): # generator of terms
    p = v = prime(1); h = [(p, 1, 1)]; nextcount = 2; oldv = ways = 0
    while True:
        (v, s, l) = heapq.heappop(h)
        if v == oldv: ways += 1
        else:
            yield ways
            for n in range(oldv+1, v): yield 0
            ways = 1
        if v >= p:
            p += prime(nextcount)
            heapq.heappush(h, (p, 1, nextcount))
            nextcount += 1
        oldv = v
        v -= prime(s); s += 1; l += 1; v += prime(l)
        heapq.heappush(h, (v, s, l))
print(list(islice(agen(), 102))) # _Michael S. Branicky_, Feb 17 2022

