# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A054994

def generate_A054994():
    """generate arbitrarily many elements of the sequence.
    TO_DO is a list of pairs (radius, exponents) where
    "exponents" is a weakly decreasing sequence, and
    radius == prod(prime_4k_plus_1(i)**j for i,j in enumerate(exponents))
    An example entry is (5525, (2, 1, 1)) because 5525 = 5**2 * 13 * 17.
    """
    TO_DO = {(1,())}
    while True:
        radius, exponents = min(TO_DO)
        yield radius #, exponents
        TO_DO.remove((radius, exponents))
        TO_DO.update(successors(radius,exponents))
def successors(radius,exponents):
    # try to increase each exponent by 1 if possible
    for i,e in enumerate(exponents):
        if i==0 or exponents[i-1]>e:
            # can add 1 in position i without violating monotonicity
            yield (radius*prime_4k_plus_1(i), exponents[:i]+(e+1,)+exponents[i+1:])
    if exponents==() or exponents[-1]>0: # add new exponent 1 at the end:
        yield (radius*prime_4k_plus_1(len(exponents)), exponents+(1,))
from sympy import isprime
primes_congruent_1_mod_4 = [5] # will be filled with 5,13,17,29,37,...
def prime_4k_plus_1(i): # the i-th prime that is congruent to 1 mod 4
    while i>=len(primes_congruent_1_mod_4): # generate primes on demand
        n = primes_congruent_1_mod_4[-1]+4
        while not isprime(n): n += 4
        primes_congruent_1_mod_4.append(n)
    return primes_congruent_1_mod_4[i]
for n,radius in enumerate(generate_A054994()):
    if n==34:
        print(radius)
        break # print the first 35 elements
    print(radius, end=", ")
# _GÃ¼nter Rote_, Sep 12 2023

