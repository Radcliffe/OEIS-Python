# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A379857

MAXSQUARE = 500
possibleSums = {i: [[], []] for i in range(MAXSQUARE ** 2 + 1)}
possibleSums[0] = [[0],[0]]
for val in range(MAXSQUARE ** 2):
    for posSquare in range(len(possibleSums[val][0])):
        newSum = possibleSums[val][0][posSquare] + 1
        curr = possibleSums[val][1][posSquare] + 1
        while val + curr ** 2 <= MAXSQUARE ** 2:
            nVal = val + curr ** 2
            if newSum not in possibleSums[nVal][0]:
                possibleSums[nVal][0].append(newSum)
                possibleSums[nVal][1].append(curr)
            else:
                index = possibleSums[nVal][0].index(newSum)
                if curr < possibleSums[nVal][1][index]:
                    possibleSums[nVal][1][index] = curr
            curr += 1
posKVals = tuple([len(possibleSums[i][0]) for i in range(MAXSQUARE ** 2 + 1)])
from itertools import count
from sympy.solvers.diophantine.diophantine import power_representation
def A379857(n):
    if n == 0: return 0
    c = 0
    for i in count(1):
        if i*(i+1)*((i<<1)+1)>6*n:
            break
        if any(len(set(t))==i for t in power_representation(n,2,i)):
            c += 1
    return c # _Chai Wah Wu_, Jan 28 2025

