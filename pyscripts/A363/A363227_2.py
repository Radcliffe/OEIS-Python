# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A363227

import math
def divisorGenerator(n):
  large_divisors = []
  for i in range(1, int(math.sqrt(n) + 1)):
    if n % i == 0:
      yield i
      if i*i != n:
        large_divisors.append(int(n / i))
    for divisor in reversed(large_divisors):
      yield divisor
from itertools import chain, combinations
def all_combinations(iterable,n):
  s = list(iterable)
  for sumset in chain.from_iterable(combinations(s, r) for r in range(len(s)+1)):
    remaining = list(set(s).symmetric_difference(set(list(sumset))))
    for subtractset in chain.from_iterable(combinations(remaining, r) for r in range(len(remaining)+1)):
      value = sum(list(sumset))-sum(list(subtractset))
      if value>0 and value<=n:
        yield value
def is_A363227(n):
  return len(set(all_combinations(divisorGenerator(n),n)))==n
max_n = 250
print([x for x in range(max_n+1) if is_A363227(x)])
from itertools import count, islice
from sympy import divisors
def A363227_gen(startvalue=1): # generator of terms >= startvalue
    for m in count(max(startvalue,1)):
        c = {0}
        for d in divisors(m,generator=True):
            c |= {a+d for a in c}|{a-d for a in c}
        if all(k in c for k in range(1,m+1)):
            yield m
A363227_list = list(islice(A363227_gen(),20)) # _Chai Wah Wu_, Jul 04 2023

