# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A374856

from gmpy2 import mpq, get_context, exp, digamma, sign, is_nan, RoundUp, RoundDown
def apply_on_interval(func, interval):
    ctx.round = RoundUp
    rounded_up = func(interval[0])
    ctx.round = RoundDown
    rounded_down = func(interval[1])
    return rounded_down, rounded_up
def digamma_sign_near_int(i, f):
    while True:
        d, u = apply_on_interval(lambda x: digamma(i + 1/x), [f, f])
        if not(is_nan(d)) and not(is_nan(u)) and (sign(d) == sign(u)):  return sign(d)
        ctx.precision += 1
def find_next_zero_crossing(f, i, growth_factor):  # Bisect.
    lo, hi = int(i * const_e), int(i * growth_factor)
    while lo - 1 != hi:
        if digamma_sign_near_int(mid := (hi + lo) // 2, f) == -1:  lo = mid
        else:  hi = mid
    return hi
def generate_sequence(n):
    seq, frac_denoms = [0, 1, 6], (mpq(str(i)) for i in range(4, n + 1))
    for f in frac_denoms:  seq.append(-find_next_zero_crossing(f, -seq[-1], seq[-1] / seq[-2]))
    return seq
const_e, ctx = exp(1), get_context()
ctx.precision = 2
A374856 = generate_sequence(30)

