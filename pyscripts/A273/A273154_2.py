# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A273154

from itertools import product
def qf(s):
    for l in range(1, len(s)//4 + 1):
      for i in range(len(s) - 4*l + 1):
          if s[i:i+l] == s[i+l:i+2*l] == s[i+2*l:i+3*l] == s[i+3*l:i+4*l]:
              return False
    return True
def a(n):
    if n == 0: return 1
    return 2*sum(1 for w in product("01", repeat=n-1) if qf("0"+"".join(w)))
print([a(n) for n in range(21)]) # _Michael S. Branicky_, Mar 14 2022
 # faster, but > memory, version for initial segment of sequence
def iqf(s): # incrementally 4th-power free
    for l in range(1, len(s)//4 + 1):
        if s[-4*l:-3*l] == s[-3*l:-2*l] == s[-2*l:-l] == s[-l:]:
            return False
    return True
def aupton(nn, verbose=False):
    alst, qfs = [1], set("0")
    for n in range(1, nn+1):
        an = 2*len(qfs)
        qfsnew = set(q+i for q in qfs for i in "01" if iqf(q+i))
        alst, qfs = alst+[an], qfsnew
        if verbose: print(n, an)
    return alst
print(aupton(20)) # _Michael S. Branicky_, Mar 14 2022

