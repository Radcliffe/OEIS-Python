# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A001597

from sympy import perfect_power
def ok(n): return n==1 or perfect_power(n)
print([m for m in range(1, 1765) if ok(m)]) # _Michael S. Branicky_, Jan 04 2021
import sympy
class A001597() :
    def __init__(self) :
        self.a = [1]
    def at(self, n):
        if n <= len(self.a):
            return self.a[n-1]
        else:
            cand = self.at(n-1)+1
            while sympy.perfect_power(cand) == False:
                cand += 1
            self.a.append(cand)
            return cand
a001597 = A001597()
for n in range(1,20):
    print(a001597.at(n)) # _R. J. Mathar_, Mar 28 2023
from sympy import mobius, integer_nthroot
def A001597(n):
    def f(x): return int(n-2+x+sum(mobius(k)*(integer_nthroot(x,k)[0]-1) for k in range(2,x.bit_length())))
    kmin, kmax = 1,2
    while f(kmax) >= kmax:
        kmax <<= 1
    while True:
        kmid = kmax+kmin>>1
        if f(kmid) < kmid:
            kmax = kmid
        else:
            kmin = kmid
        if kmax-kmin <= 1:
            break
    return kmax # _Chai Wah Wu_, Aug 13 2024

