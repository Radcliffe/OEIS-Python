# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A382258

class A382258:
   pos=0; terms=[1]; grid={0:1}; neighbors=(1, 1+1j, 1j, 1j-1, -1, -1-1j, -1j, 1-1j)
   def __str__(self):
      X=sorted({z.real for z in self.grid})
      return "\n".join("".join(f"{self.grid.get(x+y*1j,'')!s:5}" for x in X)
                       for y in sorted({z.imag for z in self.grid}, reverse=1))
   def __new__(cls, n: int|None = None): # Return a(n) or sequence if no n given.
      a=super().__new__(cls); return a if n is None else a[n]
   def clear(self): "Reset/clear grid."; self.pos=0; self.grid={0:1}; self.terms=[1]
   def __getitem__(self, n: int|slice): # "Return A382258(n)."
      while not len(self.terms)>n: self.extend()
      return self.terms[n]
   def extend(self):
      "Counter-clockwise surround the last placed number on the grid."
      free = [n for d in self.neighbors if not self.grid.get(n := self.pos + d)]
      # absolute value of difference of positions is > 1 iff there's a hole
      holes=(i for i,z in enumerate(free) if abs(free[i-1]-z)>1); N=self.terms[-1]
      if (h:=next(holes, 0)) or len(free)==2 and free[h:=1]==self.pos+1-1j:
         free = free[h:] + free[:h] # start after the first occupied cell
      for pos in free: N += 1; self.grid[pos] = N  # fill in the numbers
      setattr(A382258 if self.grid is A382258.grid else self, 'pos', pos);
      self.terms.append(N) # update terms; return None

