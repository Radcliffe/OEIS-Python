# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A319586

from sympy import isprime
from itertools import product
def pals(d, base=10): # all d-digit palindromes
    digits = "".join(str(i) for i in range(base))
    for p in product(digits, repeat=d//2):
        if d > 1 and p[0] == "0": continue
        left = "".join(p); right = left[::-1]
        for mid in [[""], digits][d%2]: yield int(left + mid + right)
def a(n):
    palslst = [p for d in range(1, n+1) for p in pals(d)][1:]
    palsset = set(palslst)
    cs = ctot = 0
    for p in pals(n):
        ctot += 1
        for p1 in palslst:
            if p - p1 in palsset: cs += 1; break
            if p1 > p//2: break
    return ctot - cs
print([a(n) for n in range(1, 8)]) # _Michael S. Branicky_, Jul 12 2021

