# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A338664

import numpy as np
# This sets the number of terms:
nits = 20
# This list will contain the complete sequence:
seq_entries = []
# i is the index of the term to be calculated:
for i in range(1, nits + 1):
    # This variable counts the rectangle pairs:
    count = 0
    # Calculate the side length of the minimal bounding square:
    bd_sq_side = np.ceil(np.sqrt(i))
    # Looking for pairs of rectangles of sizes a x b and c x d (all integers)
    # such that both can fit orthogonally into the minimal bounding square (integer side length)
    # WLOG suppose that:
    # a is the greatest of a, b, c, d...
    # c >= d
    # if a = c then b >= d
    # a rectangle of size 0 X 0 is not acceptable
    # The longest side length of either rectangle:
    for a in np.arange(1,bd_sq_side + 1):
        # The other side length of the same rectangle:
        for b in np.arange(1,1 + min(a,np.floor(i/a))):
            # Find the remaining area for the other rectangle:
            area_1   = a*b
            rem_area = i - area_1
            # If there is no remaining area, the first rectangle is not valid:
            if rem_area == 0:
                continue
            # The shorter side of the second rectangle:
            for d in np.arange(1,1 + min(a,np.floor(np.sqrt(rem_area)))):
                # The longer side of the second rectangle:
                c = rem_area / d
                # Check that the solution is valid:
                if b + d <= bd_sq_side and c == int(c) and c <= bd_sq_side and c <= a and ((a != c) or (b >= d)):
                    count += 1
    # Add the entry calculated to the list
    seq_entries.append(count)
for an in seq_entries:
    print(an)

