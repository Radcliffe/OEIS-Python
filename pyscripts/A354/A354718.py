# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A354718

# Self-explanatory
def is_prime(n):
     return not (n < 2 or any(n % x == 0 for x in range(2, int(n ** 0.5) + 1)))
# Evaluate an intish string in a given base
def atoi_base(s, b):
    out = 0
    for i in range(len(s)):
        d = s[-1-i]
        out += (b**i)*int(d)
    return out
# Constants
NUM_TERMS = 200 # Number of terms to generate
MAX_VALUE = 999 # Maximum base to consider before saying "no base will do this"
NUL_RESULT = -1 # Value returned when no valid base can be found
# Main func
def a(n):
    assert(n > 0)
    # Start with 1 ... 9
    if n < 10:
        return n+1 if is_prime(n) else NUL_RESULT
    # Check all bases up to MAX_VALUE
    base = int(max(str(n))) + 1
    while True:
        if base >= MAX_VALUE:
            return NUL_RESULT
            break
        elif is_prime(atoi_base(str(n), base)):
            return base
            break
        else:
            base += 1
for n in range(1, NUM_TERMS):
    print(a(n), end=', ')

