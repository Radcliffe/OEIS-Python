# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A113612

from sympy import isprime
from itertools import count, islice, product
def pals(digs):
    yield from digs
    for d in count(2):
        for p in product(digs, repeat=d//2):
            left = "".join(p)
            for mid in [[""], digs][d%2]:
                yield left + mid + left[::-1]
def folds(s): # generator of suffixes of palindromes starting with s
    for i in range((len(s)+1)//2, len(s)+1):
        for mid in [True, False]:
            t = s[:i] + (s[:i-1][::-1] if mid else s[:i][::-1])
            if t.startswith(s):
                yield t[len(s):]
    yield from ("".join(p)+s[::-1] for p in pals("0123456789"))
def agen():
    s, seen = "3", {"3"}; yield from [3]
    while True:
        for t in folds(s):
            if len(t) and t[0] != "0" and t not in seen and isprime(int(t)):
                break
        s += t; seen.add(t); yield int(t)
print(list(islice(agen(), 7))) # _Michael S. Branicky_, Aug 12 2022

