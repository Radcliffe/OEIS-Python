# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A180114

from itertools import count, islice
from math import prod
from sympy import factorint
def A180114_gen(): # generator of terms
    for n in count(1):
        f = factorint(n)
        if all(e>1 for e in f.values()):
            yield prod((p**(e+1)-1)//(p-1) for p,e in f.items())
A180114_list = list(islice(A180114_gen(),20)) # _Chai Wah Wu_, May 21 2023
from math import isqrt
from sympy import mobius, integer_nthroot, divisor_sigma
def A180114(n):
    def squarefreepi(n):
        return int(sum(mobius(k)*(n//k**2) for k in range(1, isqrt(n)+1)))
    def bisection(f, kmin=0, kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def f(x):
        c, l = n+x, 0
        j = isqrt(x)
        while j>1:
            k2 = integer_nthroot(x//j**2, 3)[0]+1
            w = squarefreepi(k2-1)
            c -= j*(w-l)
            l, j = w, isqrt(x//k2**3)
        c -= squarefreepi(integer_nthroot(x, 3)[0])-l
        return c
    return divisor_sigma(bisection(f, n, n)) # _Chai Wah Wu_, Sep 10 2024

