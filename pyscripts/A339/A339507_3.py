# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A339507

from itertools import combinations
def a(n):
    ans = 0
    for r in range(n+1):
        for s in combinations(range(1,n+1),r):
            strss = str(sum(s))
            ans += strss==strss[::-1]
    return ans
print([a(n) for n in range(21)]) # _Michael S. Branicky_, Dec 07 2020
from functools import lru_cache
from itertools import combinations
@lru_cache(maxsize=None)
def A339507(n):
    pallist = set(i for i in range(1,n*(n+1)//2+1) if str(i) == str(i)[::-1])
    return 1 if n == 0 else A339507(n-1) + sum(sum(d)+n in pallist for i in range(n) for d in combinations(range(1,n),i)) # _Chai Wah Wu_, Dec 08 2020
from functools import lru_cache
def cond(s): ss = str(s); return ss == ss[::-1]
@lru_cache(maxsize=None)
def b(n, s):
    if n == 0: return int(cond(s))
    return b(n-1, s) + b(n-1, s+n)
a = lambda n: b(n, 0)
print([a(n) for n in range(100)]) # _Michael S. Branicky_, Oct 05 2022

