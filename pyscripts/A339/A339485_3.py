# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A339485

from sympy import prime, isprime
from itertools import chain, combinations
def powerset(s): # skip empty set and singletons
    return chain.from_iterable(combinations(s, r) for r in range(2,len(s)+1))
def a(n):
    out = n  # count all singletons
    for s in powerset([prime(i) for i in range(1, n+1)]):
        ss = sum(s)
        if ss%len(s) == 0:
            if isprime(ss//len(s)): out += 1
    return out
print([a(n) for n in range(1, 21)]) # _Michael S. Branicky_, Dec 06 2020
from itertools import combinations
from sympy import prime
def A339485(n):
    c, primeset2 = n, set(prime(i) for i in range(1,n))
    primeset = primeset2 | {prime(n)}
    for l in range(2,n+1):
        for d in combinations(primeset,l):
            a, b = divmod(sum(d),l)
            if b == 0 and a in primeset2:
                c += 1
    return c # _Chai Wah Wu_, Dec 07 2020
from functools import lru_cache
from sympy import sieve, isprime
@lru_cache(maxsize=None)
def b(n, s, c):
    if n == 0: return int(c and s%c == 0 and isprime(s//c))
    return b(n-1, s, c) + b(n-1, s+sieve[n], c+1)
a = lambda n: b(n, 0, 0)
print([a(n) for n in range(1, 41)]) # _Michael S. Branicky_, Oct 06 2022

