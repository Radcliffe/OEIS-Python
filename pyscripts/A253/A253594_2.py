# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A253594

from itertools import count
.
def base(n,b):
   while n:
      m = n%b
      yield m
      n = (n-m)//b
.
def is_palindrome(seq):
   seq = list(seq)
   l = len(seq)//2
   return seq[:l] == seq[-1:-l-1:-1]
.
def a():
   for n in count(2):
      base_representations = [(b,list(base(n,b))) for b in range(2,n-1)]
      pals = [(b,s) for b,s in base_representations if is_palindrome(s)]
      if len(pals)>1:
         yield n
from sympy.ntheory import digits
def ok(n):
    c = 0
    for b in range(2, n-1):
        d = digits(n, b)[1:]
        c += int(d == d[::-1])
        if c == 2: return True
    return c > 1
print([k for k in range(125) if ok(k)]) # _Michael S. Branicky_, Feb 05 2024

