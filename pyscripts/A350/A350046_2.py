# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A350046

import sympy
def last_exponent(c,i):
    if sympy.nextprime(i//2)<=i:
        if c==1 or sympy.isprime(c-1):
            return(True)
        else: return(False)
    else:
        if c==1 or sympy.isprime(c):
            return(True)
        else: return(False)
A350046_n=[2,3]
for i in range(4,1001):
    p_expo=True
    x = list(sympy.primerange(2,i//2+1))
    prime_expo=[]
    for j in (x):
        c=i//j
        s=0
        while c!=0:
            s=s+c
            c=c//j
        prime_expo.append(s)
    c=prime_expo[0]
    l=len(prime_expo)
    for j in range(1,l):
        c=c-prime_expo[j]
        if c!=0:
            if c!=1 and not sympy.isprime(c):
                p_expo=False
                break
        c=prime_expo[j]
    prime_expo=last_exponent(c,i)
    if p_expo==True:
       A350046_n.append(i)
print(A350046_n)
from collections import Counter
from itertools import count, islice
from sympy import factorint, isprime
def A350046_gen(): # generator of terms
    f = Counter()
    for m in count(2):
        f += Counter(factorint(m))
        e = sorted(f.items())
        if all(d <= 1 or isprime(d) for d in (abs(e[i+1][1]-e[i][1]) for i in range(len(e)-1))):
            yield m
A350046_list = list(islice(A350046_gen(),15)) # _Chai Wah Wu_, Jan 10 2022

