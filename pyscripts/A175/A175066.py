# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A175066

from math import gcd
from sympy import mobius, integer_nthroot, factorint, divisor_count, primerange
def A175066(n):
    if n == 1: return 1
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def f(x): return int(n+sum(mobius(k)*(integer_nthroot(x,k)[0]-1+sum(integer_nthroot(x,p*k)[0]-1 for p in primerange((x//k).bit_length()))) for k in range(1,x.bit_length())))
    return divisor_count(gcd(*factorint(bisection(f,n,n)).values()))-1 # _Chai Wah Wu_, Nov 24 2024

