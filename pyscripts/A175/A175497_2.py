# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A175497

from itertools import count, islice, takewhile
from sympy import divisors
from sympy.ntheory.primetest import is_square
def A175497_gen(startvalue=0): # generator of terms >= startvalue
    return filter(lambda k:not k or any(map(lambda d: is_square((d<<3)+1) and is_square((k**2//d<<3)+1), takewhile(lambda d:d**2<k,divisors(k**2)))),count(max(startvalue,0)))
A175497_list = list(islice(A175497_gen(),20)) # _Chai Wah Wu_, Mar 13 2023
def A175497_list(n):
    def A322699_A(k, n):
        p, q, r, m = 0, k, 4*k*(k+1), 0
        while m < n:
            p, q, r = q, r, (4*k+3)*(r-q) + p
            m += 1
        return p
    def a(k, n, j):
        if n == 0: return 0
        p = A322699_A(k, n)*(A322699_A(k, n)+1)*(2*k+1) - a(k, n-1, 1)
        q = (4*k+2)*p - A322699_A(k, n)*(A322699_A(k, n)+1)//2
        m = 1
        while m < j: p, q = q, (4*k+2)*q - p; m += 1
        return p
    A = set([a(k, 1, 1) for k in range(n+1)])
    k, l, m = 1, 1, 2
    while True:
        x = a(k, l, m)
        if x < max(A):
            A |= {x}
            A  = set(sorted(A)[:n+1])
            m += 1
        else:
            if m == 1 and l == 1:
                if k > n:
                    return sorted(A)
                k += 1
            elif m > 1:
                l += 1; m = 1
            elif l > 1:
                k += 1; l, m = 1, 1
# _Onur Ozkan_, Mar 15 2023

