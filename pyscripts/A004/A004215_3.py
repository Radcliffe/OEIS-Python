# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A004215

def valuation(n, b):
    v = 0
    while n > 1 and n%b == 0: n //= b; v += 1
    return v
def ok(n): return n//4**valuation(n, 4)%8 == 7 # after _M. F. Hasler_
print(list(filter(ok, range(344)))) # _Michael S. Branicky_, Jul 15 2021
from itertools import count, islice
def A004215_gen(startvalue=1): # generator of terms >= startvalue
    return filter(lambda n:not (m:=(~n&n-1).bit_length())&1 and (n>>m)&7==7,count(max(startvalue,1)))
A004215_list = list(islice(A004215_gen(),30)) # _Chai Wah Wu_, Jul 09 2022
def A004215(n):
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        kmin = kmax >> 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def f(x): return n+x-sum(((x>>(i<<1))-7>>3)+1 for i in range(x.bit_length()>>1))
    return bisection(f,n,n) # _Chai Wah Wu_, Feb 14 2025

