# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A372034

from sympy import factorint, isprime
def ni(s): return sorted(s, reverse=True) == list(s)
def ok(n):
    if n < 4 or isprime(n): return False
    s, f = str(n), "".join(str(p)*e for p, e in factorint(n).items())
    return ni(s+f)
print([k for k in range(10**6) if ok(k)]) # _Michael S. Branicky_, Apr 23 2024
 # faster for initial segment of sequence
from sympy import factorint, isprime
from itertools import islice, combinations_with_replacement as mc
def ni(s): return s == "".join(sorted(s, reverse=True))
def bgen(d):
    yield from ("".join(m) for m in mc("987654321", d))
def agen(): # generator of terms
    for d in range(1, 70):
        out = set()
        for s in bgen(d):
            t = int(s)
            if t < 4 or isprime(t): continue
            if ni(s+"".join(str(p)*e for p, e in factorint(t).items())):
                out.add(t)
        yield from sorted(out)
print(list(islice(agen(), 50))) # _Michael S. Branicky_, Apr 23 2024

