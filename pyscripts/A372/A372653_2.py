# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A372653

import itertools
import math
def a(n):
  res = 0
  for p in itertools.permutations([i for i in range(1, 2*n + 1)], n):
    i = 0
    s = 0
    for j in range(1, 2*n + 1):
      if j not in p:
        s += p[i]**j
        i += 1
    if math.isqrt(s)**2 == s:
      res = max(res, s)
  return res
from itertools import combinations, permutations
from sympy.ntheory.primetest import is_square
def A372653(n):
    a, m, f = set(range(1,2*n+1)), 0, [[b**c for c in range(2*n+1)] for b in range(2*n+1)]
    for b in combinations(a,n):
        clist = sorted(a-set(b))
        for d in permutations(range(n)):
            k = sum(f[b[i]][clist[d[i]]] for i in range(n))
            if k>m and is_square(k):
                m = k
    return m # _Chai Wah Wu_, May 13 2024

