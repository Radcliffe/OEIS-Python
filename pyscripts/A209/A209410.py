# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A209410

#Returns the actual list of valid subsets
def avoidscode(n,bitstring=(1,0,1,0,1)):
 patterns=list()
 for start in range (1,n-len(bitstring)+2):
  s=set()
  for i in range(len(bitstring)):
   if bitstring[i]:
    s.add(start+i)
  patterns.append(s)
 s=list()
 for i in range(sum(bitstring)):
  for smallset in comb(range(1,n+1),i):
   s.append(smallset)
 for i in range(sum(bitstring),n+1):
  for temptuple in comb(range(1,n+1),i):
   tempset=set(temptuple)
   for sub in patterns:
    if sub <= tempset:
     status=False
     break
   if status:
    s.append(tempset)
 return s
#Counts all such sets
def countavoidscode(n,bitstring=(1,0,1,0,1)):
 return len(avoidscode(n))
#From recurrence
def a(n, adict={0:1, 1:2, 2:4, 3:8, 4:16, 5:28, 6:49, 7:91, 8:169}):
 if n in adict:
  return adict[n]
 adict[n]=a(n-1) + 2*a(n-3) + 2*a(n-5) + 2*a(n-6) - a(n-8) - a(n-9)
 return adict[n]

