# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A209409

#Returns the actual list of valid subsets
def containscode(n,bitstring=(1,0,1,0,1)):
 patterns=list()
 for start in range (1,n-len(bitstring)+2):
  s=set()
  for i in range(len(bitstring)):
   if bitstring[i]:
    s.add(start+i)
  patterns.append(s)
 s=list()
 for i in range(sum(bitstring),n+1):
  for temptuple in comb(range(1,n+1),i):
   tempset=set(temptuple)
   for sub in patterns:
    if sub <= tempset:
     s.append(tempset)
     break
 return s
#Counts all such sets
def countcontainscode(n,bitstring=(1,0,1,0,1)):
 return len(containscode(n))
#From recurrence
def a(n, adict={0:0, 1:0, 2:0, 3:0, 4:0, 5:4, 6:15, 7:37, 8:87, 9:200}):
 if n in adict:
  return adict[n]
 adict[n]=3*a(n-1) - 2*a(n-2) + 2*a(n-3) - 4*a(n-4) + 2*a(n-5) - 2*a(n-6) - 4*a(n-7) - a(n-8) + a(n-9) + 2*a(n-10)
 return adict[n]

