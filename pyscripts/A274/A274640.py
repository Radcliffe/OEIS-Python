# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A274640

class Lines: # manage lines in direction d = dx + dy*1j
    def __init__(self, d):
        self.lines={}; self.t = d.real/d.imag if d.imag else None
    def __call__(self, pos): # Return the line through pos in direction d
        index = pos.imag if self.t is None else pos.real - pos.imag*self.t
        if index not in self.lines: self.lines[index] = Values()
        return self.lines[index]
class Values(set): # the set of used numbers on a given line
    def next(self, n): # return least k >= n not on this line
        return min(m+1 for m in self if m+1 >= n and m+1 not in self
                   ) if n in self else n
def A274640(): # generator of the sequence, see below for possible usage
    lines = [Lines(d) for d in (1, 1+1j, 1j, 1-1j)]; pos = 0
    for side in range(9**9):
        for _ in range(side//2 + 1):
            n = 1; lines_here = [L(pos) for L in lines]
            while any(n < (n := L.next(n)) for L in lines_here): pass
            yield n; any(L.add(n) for L in lines_here); pos += 1j**side
[a for a,_ in zip(A274640(),range(99))] # _M. F. Hasler_, Feb 01 2025

