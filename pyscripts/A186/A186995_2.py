# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A186995

from itertools import count
from sympy import isprime
from sympy.ntheory.digits import digits
def fromdigits(d, b):
    n = 0
    for di in d: n *= b; n += di
    return n
def h1(n, b): # hamming distance 1 neighbors of n in base b
    d = digits(n, b)[1:]; L = len(d)
    yield from (fromdigits(d[:i]+[c]+d[i+1:], b) for c in range(b) for i in range(L) if c!=d[i])
def ok(n, b): return isprime(n) and all(not isprime(k) for k in h1(n, b))
def a(n): return next(k for k in count(2) if ok(k, n))
print([a(n) for n in range(2, 12)]) # _Michael S. Branicky_, Jul 31 2022
from sympy import isprime, nextprime
from sympy.ntheory import digits
def A186995(n):
    p = 2
    while True:
        s = digits(p,n)[1:]
        l = len(s)
        for i,j in enumerate(s[::-1]):
            m = n**i
            for k in range(n):
                if k!=j and isprime(p+(k-j)*m):
                    break
            else:
                continue
            break
        else:
            return p
        p = nextprime(p) # _Chai Wah Wu_, Mar 24 2024

