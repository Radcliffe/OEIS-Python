# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A260873

from copy import copy
from fractions import Fraction
from itertools import chain, combinations
def powerset(s):
  return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
def distinct_means(means, lst, t):
  newmeans = copy(means)
  for subset in powerset(lst):
    sm = Fraction(t+sum(subset), len(subset)+1)
    if sm in newmeans: return False, means
    else: newmeans.add(sm)
  return True, newmeans
def aupto(n):
  largest = 0
  alst = []
  prevmeans = set()
  for k in range(n):
    t = largest + 1
    passes, means = distinct_means(prevmeans, alst, t)
    while not passes:
      t += 1
      passes, means = distinct_means(prevmeans, alst, t)
    alst.append(t)
    largest = t
    prevmeans = means
  return alst
print(aupto(10)) # _Michael S. Branicky_, Jan 02 2021

