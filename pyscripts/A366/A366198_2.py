# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A366198

from itertools import count, islice
def ispal(n): return (s:=str(n))==s[::-1]
def agen(): # generator of terms
    an, seen = 0, set()
    while True:
        yield an; seen.add(an); s = str(an)
        an = next(k for k in count(0) if k not in seen and ispal(s+str(k)[1:]))
print(list(islice(agen(), 80))) # _Michael S. Branicky_, Oct 04 2023
 # faster version suitable for generating b-file
from sympy import isprime
from itertools import count, islice, product
def pals(digs):
    yield from digs
    for d in count(2):
        for p in product(digs, repeat=d//2):
            left = "".join(p)
            for mid in [[""], digs][d%2]:
                yield left + mid + left[::-1]
def folds(s): # generator of suffixes of palindromes starting with s
    for i in range((len(s)+1)//2, len(s)+1):
        for mid in [True, False]:
            t = s[:i] + (s[:i-1][::-1] if mid else s[:i][::-1])
            if t.startswith(s):
                yield t[len(s):]
    yield from ("".join(p)+s[::-1] for p in pals("0123456789"))
def agen():
    s, seen = "0", {"0"}
    while True:
        yield int(s)
        found = False
        for end in folds(s):
            for start in "123456789":
                t = start + end
                if t not in seen:
                    found = True; break
            if found: break
        s, seen = t, seen | {t}
print(list(islice(agen(), 60))) # _Michael S. Branicky_, Oct 04 2023

