# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A046477

 # efficiently search to large numbers
from sympy import isprime
from itertools import product
def candidate_prime_pals(digits):
  ruled_out = "024568" # can't be even or multiple of 5
  midrange = [[""], "0123456789"]
  for p in product("0123456789", repeat=digits//2):
    left = "".join(p)
    if len(left):
      if left[0] in ruled_out: continue
    for middle in midrange[digits%2]:
      yield left+middle+left[::-1]
for digits in range(1, 15):
  for p in candidate_prime_pals(digits):
    intp = int(p); octp = oct(intp)[2:]
    if octp==octp[::-1]:
      if isprime(intp):
        print(intp, end=", ") # _Michael S. Branicky_, Dec 19 2020
 # alternate sufficient for producing terms through a(9)
from sympy import isprime
def ispal(n): strn = str(n); return strn==strn[::-1]
for n in range(10**7):
  if ispal(n) and ispal(oct(n)[2:]) and isprime(n):
    print(n) # _Michael S. Branicky_, Dec 20 2020

