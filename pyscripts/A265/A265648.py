# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A265648

# see link for faster version
from sympy import divisors
from itertools import product
def is_pow(s):
    return any(s == s[:d]*(len(s)//d) for d in divisors(len(s))[:-1])
def is_concat_pows(s, c):
    if len(s) < 2: return False
    if c > 0 and is_pow(s): return True
    for i in range(2, len(s)-1):
        if is_pow(s[:i]) and is_concat_pows(s[i:], c+1): return True
    return False
def ok(s):
    return is_pow(s) and not is_concat_pows(s, 0)
def pows_len(n): # generate powers of length n beginning with 0
    for d in divisors(n)[:-1]:
        for b in product("01", repeat=d-1):
            yield "".join(('0'+''.join(b))*(n//d))
def a(n):
    return 2*sum(ok(s) for s in pows_len(n) if s[0] == '0')
print([a(n) for n in range(1, 26)]) # _Michael S. Branicky_, Aug 17 2021

