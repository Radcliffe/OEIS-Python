# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A069493

from math import gcd
from sympy import factorint, integer_nthroot
def A069493(n):
    def f(x):
        c = n+x
        for y1 in range(1,integer_nthroot(x,11)[0]+1):
            if all(d<=1 for d in factorint(y1).values()):
                for y2 in range(1,integer_nthroot(z2:=x//y1**11,10)[0]+1):
                    if gcd(y2,y1)==1 and all(d<=1 for d in factorint(y2).values()):
                        for y3 in range(1,integer_nthroot(z3:=z2//y2**10,9)[0]+1):
                            if gcd(y3,y1)==1 and gcd(y3,y2)==1 and all(d<=1 for d in factorint(y3).values()):
                                for y4 in range(1,integer_nthroot(z4:=z3//y3**9,8)[0]+1):
                                    if gcd(y4,y1)==1 and gcd(y4,y2)==1 and gcd(y4,y3)==1 and all(d<=1 for d in factorint(y4).values()):
                                        for y5 in range(1,integer_nthroot(z5:=z4//y4**8,7)[0]+1):
                                            if gcd(y5,y1)==1 and gcd(y5,y2)==1 and gcd(y5,y3)==1 and gcd(y5,y4)==1 and all(d<=1 for d in factorint(y5).values()):
                                                c -= integer_nthroot(z5//y5**7,6)[0]
        return c
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    return bisection(f,n,n) # _Chai Wah Wu_, Sep 10 2024

