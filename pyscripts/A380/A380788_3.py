# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A380788

from sympy import isprime
def ok(n): return isprime(n.bit_length())
print([k for k in range(150) if ok(k)])
 # faster for initial segment of sequence
from itertools import islice
from sympy import isprime, nextprime
def agen(): # generator of terms
    d = 2
    while True:
        yield from (i for i in range(2**(d-1), 2**d))
        d = nextprime(d)
print(list(islice(agen(), 65)))
from sympy import primerange
def A380788(n):
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        kmin = kmax >> 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def f(x): return n+x-sum(min(x,(1<<i)-1)-(1<<i-1)+1 for i in primerange(2,x.bit_length()+1))
    return bisection(f,n,n) # _Chai Wah Wu_, Feb 03 2025

