# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A348633

from sympy import isprime
from itertools import product
def eo1(): # generates +ive terms with every other digit 1 and not-1 or v.v.
    yield from range(1, 10)
    digits = 2
    while True:
        for not1s in product("023456789", repeat=digits//2):
            yield(int("1" + "1".join(not1s) + "1"*(digits%2)))
        for first in "23456789":
            for not1s in product("023456789", repeat=(digits-1)//2):
                yield(int("1".join((first,)+not1s) + "1"*(digits%2==0)))
        digits += 1
def aupton(terms):
    alst, aset, astr = [2], {2}, "2"
    kgen = {True: eo1(), False: eo1()}
    for n in range(2, terms+1):
        mustbegin1 = (astr[-1] != "1")
        k = next(kgen[mustbegin1]); sk = str(k)
        while k in aset or ((sk[0] == "1") != mustbegin1) or not isprime(k):
            k = next(kgen[mustbegin1]); sk = str(k)
        alst.append(k); aset.add(k); astr += sk
    return alst
print(aupton(64)) # _Michael S. Branicky_, Oct 28 2021

