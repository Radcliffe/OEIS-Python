# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A291926

def floorLog(b,n):
    x=-1
    while(n>0):
        x+=1
        n//=b
    return x
def distinctDigits(n,b):
    li=[]
    while(n>0):
        li.append(n%b)
        n//=b
    li=list(set(li))
    li.sort()
    return li
def iroot(k,n):
    u, s = n, n+1
    while u < s:
        s = u
        t = (k-1) * s + n // (s**(k-1))
        u = t // k
    return s
def perfectPower(n):
    if(n==1): return 0
    x=1
    for i in range(2,floorLog(2,n)+1):
        if(iroot(i,n)**i==n): x=i
    return x
def leastPandigital(b,n):
    if(n<=1 or b<=1): return 0
    if(n==2): return 2 if (b==(1<<b.bit_length())-1) else 1
    if(iroot(perfectPower(n),n)==iroot(perfectPower(b),b)): return 0
    a=(floorLog(b,n)*(n-1))
    while(distinctDigits(b**a,n)!=list(range(n))): a+=1
    return a
for i in range(2,257):
    print(str(i)+" "+str(leastPandigital(2,i)))
from sympy.ntheory.digits import digits
def a(n):
    b = bin(n)[2:]
    if b.strip('0') == '1': return int(n == 2)
    k = (len(b)-1)*(n-1)
    while len(set(digits(2**k, n)[1:])) != n: k += 1
    return k
print([a(n) for n in range(2, 65)]) # _Michael S. Branicky_, Oct 07 2021

