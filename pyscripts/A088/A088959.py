# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A088959

from math import prod
from sympy import isprime
primes_congruent_1_mod_4 = [5]
def prime_4k_plus_1(i): # the i-th prime that is congruent to 1 mod 4
    while i>=len(primes_congruent_1_mod_4): # generate primes on demand
        n = primes_congruent_1_mod_4[-1]+4
        while not isprime(n): n += 4
        primes_congruent_1_mod_4.append(n)
    return primes_congruent_1_mod_4[i]
def generate_A054994():
    TO_DO = {(1,())}
    while True:
        radius, exponents = min(TO_DO)
        yield radius, exponents
        TO_DO.remove((radius, exponents))
        TO_DO.update(successors(radius,exponents))
def successors(r,exponents):
    for i,e in enumerate(exponents):
        if i==0 or exponents[i-1]>e:
            yield (r*prime_4k_plus_1(i), exponents[:i]+(e+1,)+exponents[i+1:])
    if exponents==() or exponents[-1]>0:
        yield (r*prime_4k_plus_1(len(exponents)), exponents+(1,))
n,record=0,-1
for radius,expo in generate_A054994():
    num_pyt = (prod((2*e+1) for e in expo)-1)//2
    if num_pyt>record:
        record = num_pyt
        n += 1
        print(radius, end="") # or record, for A088111
        if n==26: break # stop after 26 entries
        print(end=", ")
print() # _GÃ¼nter Rote_, Sep 13 2023

