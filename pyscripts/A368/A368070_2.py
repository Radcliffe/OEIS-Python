# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A368070

def A368070(n):
  m=0
  r=[1]
  for k in range(n.bit_length()):
    if m!=(m:=n>>k&1): r=r[::-1]
    for j in range(k): r[j+1]+=r[j]
    r.insert(0,0)
  return sum(r) # _Nathan L. Skirrow_, Apr 20 2025
from fractions import Fraction as frac
inte=lambda p: [0]+[frac(c,i+1) for i,c in enumerate(p)]
from math import factorial as fact
def A368070(n):
  r=[1]
  for k in range(n.bit_length()):
    i=inte(r)
    r=i if n>>k&1 else [sum(i)]+[-c for c in i[1:]]
  return int(fact(n.bit_length()+1)*sum(inte(r)))
#without the multiplication, this is the probability that a sequence of real numbers in [0,1] satisfies the chain of inequalities. # _Nathan L. Skirrow_, Apr 20 2025

