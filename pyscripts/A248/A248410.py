# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A248410

from itertools import chain, combinations
def powerset(iterable):
   s = list(iterable)
   return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
print("Start")
a_n = 0
for num in range(1,1000):
   div_set = set((-1,1))
   a_n = 0
   for divisor in range(1, num + 1):
      if (num % divisor == 0):
         div_set.add(divisor)
         div_set.add(divisor*(-1))
   pow_set = set(powerset(div_set))
   num_set = len(pow_set)
   for count_set in range(0, num_set):
      subset = set(pow_set.pop())
      num_subset = len(subset)
      prod = 1
      if num_subset < 1:
         prod = 0
      for count_subset in range (0, num_subset):
         prod = prod * subset.pop()
      if prod != 0:
         if (num % prod == 0):
            a_n = a_n +1
   print(num, a_n)
print("Ende")

