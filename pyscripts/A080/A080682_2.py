# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A080682

import heapq
from itertools import islice
from sympy import primerange
def agen(p=19): # generate all p-smooth terms
    v, oldv, h, psmooth_primes, = 1, 0, [1], list(primerange(1, p+1))
    while True:
        v = heapq.heappop(h)
        if v != oldv:
            yield v
            oldv = v
            for p in psmooth_primes:
                heapq.heappush(h, v*p)
print(list(islice(agen(), 72))) # _Michael S. Branicky_, Nov 20 2022
from sympy import integer_log
def A080682(n):
    def bisection(f,kmin=0,kmax=1):
        while f(kmax) > kmax: kmax <<= 1
        while kmax-kmin > 1:
            kmid = kmax+kmin>>1
            if f(kmid) <= kmid:
                kmax = kmid
            else:
                kmin = kmid
        return kmax
    def g(x,m): return sum((x//3**i).bit_length() for i in range(integer_log(x,3)[0]+1)) if m==3 else sum(g(x//(m**i),prevprime(m))for i in range(integer_log(x,m)[0]+1))
    def f(x): return n+x-g(x,19)
    return bisection(f,n,n) # _Chai Wah Wu_, Sep 16 2024

