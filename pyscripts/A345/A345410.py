# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A345410

from itertools import product
from collections import Counter
from sympy import isprime, nextprime
def epgen(start=1, end=float('inf')): # generates unique emirp/prime pairs
    digits = 2
    while True:
      for first in "1379":
        for last in "1379":
          if last < first: continue
          for mid in product("0123456789", repeat=digits-2):
            strp = first + "".join(mid) + last
            revstrp = strp[::-1]
            if strp >= revstrp: continue
            p = int(strp)
            if p > end: return
            revp = int(strp[::-1])
            if isprime(p) and isprime(revp): yield (p, revp)
      digits += 1
def aupto(lim):
    alst = []
    c = Counter(sum(ep) for ep in epgen(1, lim) if sum(ep) <= lim)
    r = set(c.values())
    for i in range(1, max(r)+1):
        if i in r: alst.append(min(s for s in c if c[s] == i))
        else: break
    return alst
print(aupto(11*10**5)) # _Michael S. Branicky_, Jun 19 2021

