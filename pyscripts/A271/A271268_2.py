# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A271268

from functools import reduce
from operator import mul
def product(seq):
    return reduce(mul, seq, 1)
def conversion(n):
    n = str(n)
    return str(sum(int(i) for i in n)) + \
           str(product(int(i) for i in n))
def a271268(n):
    if n == 1:
        return 8
    else:
        r = 8
        while n > 1:
            r = conversion(r)
            n -= 1
        return int(r)
from math import prod  # first program for illustration - better use the second one
def A271268_gen(n = 8): # optional parameter defines starting value
    while True: yield n; d=list(map(int,str(n))); n=int(f"{sum(d)}{prod(d)}")
def A271268(n = None): # if no n given, generator of "infinite" sequence
    return (8, 17112, 1214, 88, 1664, 17144)[n%5+1 if n>1 else 0] if n \
        else (A271268(n)for n in range(1,1<<59)) # _M. F. Hasler_, Apr 01 2025

