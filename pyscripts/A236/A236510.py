# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A236510

import re
...
def factorize(n):
   for prime in primes:
      power = 0
      while n%prime==0:
         n /= prime
         power += 1
      yield power
...
re_zeros = re.compile('(?P<zeros>0*)(?P<middle>.*[^0])(?P=zeros)')
...
is_palindrome = lambda s: s==s[::-1]
...
def has_palindromic_factorization(n):
   if n==1:
      return True
   s = ''.join(str(x) for x in factorize(n))
   try:
      middle = re_zeros.match(s).group('middle')
      if is_palindrome(middle):
         return True
   except AttributeError:
      return False
...
a = has_palindromic_factorization

