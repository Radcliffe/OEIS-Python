# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A335502

from sympy.ntheory.factor_ import digits
from functools import reduce
def drop(x,n,k):
  # Drop all digits k from x in base n.
  return reduce(lambda x,j:n*x+j if j!=k else x,digits(x, n)[1:],0)
def cycle_length(n,k,m):
  # Brent's algorithm for finding cycle length.
  # Note: The function may hang if the sequence never enters a cycle.
  if (m,n,k)==(5,10,7):
    return 0 # A little cheating; see A335506.
  p=1
  length=0
  tortoise=hare=1
  nz=0
  while True:
    hare=drop(m*hare,n,k)
    while hare and hare%n==0:
      hare//=n
      nz+=1 # Keep track of the number of trailing zeros.
    length+=1
    if tortoise==hare:
      break
    if p==length:
      tortoise=hare
      nz=0
      p*=2
      length=0
  return length if not nz else 0
def A335502(n,k):
  return cycle_length(n,k,2) if n>1 else 0

