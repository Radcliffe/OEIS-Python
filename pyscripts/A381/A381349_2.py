# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A381349

from itertools import combinations_with_replacement, permutations
def pairs(m): return tuple([sum(1 for j in range(len(m)-i) if m[j] == m[j+i]) for i in range(1,len(m))])
def A381349(n,k):
    S = set()
    for y in combinations_with_replacement(range(1,k+1),n-1):
        S.update(z for z in permutations((1,)+y))
    return len({pairs(i) for i in S})
 # see links for a different algorithm
from sympy.utilities.iterables import multiset_permutations
from itertools import combinations, combinations_with_replacement
def E(w):
    return tuple(sum(1 for j, k in combinations(range(len(w)), 2) if w[j] == w[k] and j+i == k) for i in range(len(w)))
def row(n): # generator of row n
    v, S = 0, set()
    for k in range(1, n+1):
        for c in combinations_with_replacement(range(1, k+1), n-k):
            if len(c) > 0 and c[0] == 2: break
            S.update(E(e) for e in multiset_permutations(tuple(range(1, k+1))+c))
        yield len(S)
print([e for n in range(1, 9) for e in row(n)]) # _Michael S. Branicky_, Feb 26 2025

