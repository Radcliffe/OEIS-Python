# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A373195

from math import isqrt
def is_square(n):
    return isqrt(n) ** 2 == n
def precompute_tuples(N):
    tuples = []
    for i in range(1, N + 1):
        for j in range(i + 1, N + 1):
            for k in range(j + 1, N + 1):
                for l in range(k + 1, N + 1):
                    for m in range(l + 1, N + 1):
                        for n in range(m + 1, N + 1):
                            if is_square(i * j * k * l * m * n):
                                tuples.append((i, j, k, l, m, n))
    return tuples
def valid_subset(A, tuples):
    set_A = set(A)
    for i, j, k, l, m, n in tuples:
        if i in set_A and j in set_A and k in set_A and l in set_A and m in set_A and n in set_A:
            return False
    return True
def largest_subset_size(N, tuples):
    from itertools import combinations
    for size in reversed(range(1, N + 1)):
        for subset in combinations(range(1, N + 1), size):
            if valid_subset(subset, tuples):
                return size
for N in range(1, 26):
    print(largest_subset_size(N, precompute_tuples(N)))

