# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A373797

from itertools import permutations
from sympy import primefactors, primepi
def A373797(n):
    c = [set()]+[set(primefactors(i)) for i in range(1,n+1)]+[set()]
    for k in range(n-primepi(n)+primepi(n>>1),0,-1):
        for a in permutations(range(1,n+1),k):
            alist = [0]+list(a)+[n+1]
            if all((p in c[alist[i-1]])^(p in c[alist[i+1]]) for i, d in enumerate(alist[1:-1],1) for p in c[d]):
                return k # _Chai Wah Wu_, Jul 26 2024
# Given a list S = [s_1, s_2, ..., s_k], this function checks if the terms s_i are such that if any s_i is divisible by a prime p, then p also divides exactly one of s_{i-1} and s_{i+1}.
from sympy import primefactors
def isSolution(S: list[int]) -> bool:
    return all(not any((S[i-1] % p == 0) == (S[i+1] % p == 0)
           for p in primefactors(S[i])) for i in range(1, len(S)-1))
# _Peter Luschny_, Jul 27 2024

