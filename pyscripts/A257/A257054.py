# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A257054

def a():
    digits = [1,2,3,4,5,6,7,8,9]
.
    combs = []
    for n in range(1,10):
        combs += list(combinations(digits,n))
.
    # for each choice of digits, find the smallest element of the sequence which contains those digits, as a template
    templates = [''.join(str(d)*(lcm(comb)//d) for d in comb) for comb in combs]
    templates.sort(key=len)
.
    # for each number of digits
    for i in count(1):
        # templates whose lengths divide i
        ts = takewhile(lambda x:len(x)<=i,templates)
        ts = [t for t in ts if i%len(t)==0]
        # for each template, multiply it so it has i digits, then find all anagrams
        its = sum(([int(''.join(x)) for x in permutations_without_duplicates(sorted(t*(i//len(t))))] for t in ts),[])
        its.sort()
        for n in its:
            yield n

