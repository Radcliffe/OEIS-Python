# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A375327

from sympy import isprime
from itertools import count, islice, product
def bgen(i): # generates terms with np/np/p, np/p/np, or p/np/np digits
    digs = ["014689", "2357"]
    for digits in count(1):
        patt = [digs[(i+j)%3 == 2] for j in range(digits)]
        yield from (int("".join(s)) for s in product(*patt) if digits==1 or s[0]!="0")
def agen(): # generator of terms
    seen, s = set(), 0
    for n in count(1):
        p = (n-1)%3 == 2
        an = next(k for k in bgen(s) if k not in seen and isprime(k)==p)
        yield an
        seen.add(an)
        s += len(str(an))
print(list(islice(agen(), 99))) # _Michael S. Branicky_, Aug 13 2024

