# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A128644

from itertools import combinations
from math import prod, isqrt
from sympy import primerange, integer_nthroot, primepi, factorint
def A128644(n):
    if n == 1: return 1
    def g(x,a,b,c,m): yield from (((d,) for d in enumerate(primerange(b,isqrt(x//c)+1),a)) if m==2 else (((a2,b2),)+d for a2,b2 in enumerate(primerange(b,integer_nthroot(x//c,m)[0]+1),a) for d in g(x,a2,b2,c*b2,m-1)))
    def f(x): return int(n+x-2-primepi(x)-sum(sum(primepi(x//prod(c[1] for c in a))-a[-1][0] for a in g(x,0,1,1,i)) for i in range(2,4)))
    kmin, kmax = 1,2
    while f(kmax) >= kmax:
        kmax <<= 1
    while True:
        kmid = kmax+kmin>>1
        if f(kmid) < kmid:
            kmax = kmid
        else:
            kmin = kmid
        if kmax-kmin <= 1:
            break
    fs = factorint(kmax)
    if max(fs.values()) == 1:
        a = set(fs.keys())
        return sum(prod((p**sum(1 for q in b if q%p==1)-1)//(p-1) for p in a-set(b)) for l in range(0, len(a)+1) for b in combinations(a, l))
    if len(fs)==1: return 3*list(fs.values())[0]-4
    p, q = list(fs.keys())
    if fs[p] > 1: p, q = q, p
    if q%p==1 and p&1: return p+9>>1
    r = (p-1)%(q**2)
    if (p==3 and q==2) or (p==2 and q&1) or not r: return 5
    if not (p-1)%q and p>3 and r: return 4
    if not (q+1)%p and p&1 and q&1: return 3
    if (q+1)%p and (q-1)%p and (p-1)%q: return 2 # _Chai Wah Wu_, Aug 23 2024

