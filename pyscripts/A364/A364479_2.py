# This file is auto-generated from OEIS data.
# Please do not edit this file directly.
# OEIS sequence: A364479

def is_prime(num):
    return num > 1 and all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))
def is_palindrome(num):
    return str(num) == str(num)[::-1]
def is_happy(num):
    while num != 1 and num != 4:
        num = sum(int(digit) ** 2 for digit in str(num))
    return num == 1
happy_palindromic_primes = [num for num in range(1, 10000000) if is_prime(num) and is_palindrome(num) and is_happy(num)]
print(happy_palindromic_primes)
from itertools import islice
from sympy import isprime
def A364479_gen(): # generator of terms
    n = 1
    while True:
        for z in (1,3,5,7,9):
            for y in range(z*n, (z+1)*n):
                k, m = y//10, 0
                while k >= 10:
                    k, r = divmod(k, 10)
                    m = 10*m + r
                if isprime(a:=y*n + 10*m + k):
                    b = a
                    while b not in {1,37,58,89,145,42,20,4,16}:
                        b = sum((0, 1, 4, 9, 16, 25, 36, 49, 64, 81)[ord(d)-48] for d in str(b))
                    if b == 1:
                        yield a
        n *= 10
A364479_list = list(islice(A364479_gen(),20)) # _Chai Wah Wu_, Aug 02 2023

